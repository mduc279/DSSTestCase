<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="DssTestPlan" enabled="true">
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables - All " enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">http</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="hostname" elementType="Argument">
            <stringProp name="Argument.name">hostname</stringProp>
            <stringProp name="Argument.value">192.168.1.79</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sitename" elementType="Argument">
            <stringProp name="Argument.name">sitename</stringProp>
            <stringProp name="Argument.value">DigitalSignService</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="apiversion" elementType="Argument">
            <stringProp name="Argument.name">apiversion</stringProp>
            <stringProp name="Argument.value">v4.3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="appname" elementType="Argument">
            <stringProp name="Argument.name">appname</stringProp>
            <stringProp name="Argument.value">workspace</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="month" elementType="Argument">
            <stringProp name="Argument.name">month</stringProp>
            <stringProp name="Argument.value">11</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="yesterday" elementType="Argument">
            <stringProp name="Argument.name">yesterday</stringProp>
            <stringProp name="Argument.value">21</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="start_hour_createapp" elementType="Argument">
            <stringProp name="Argument.name">start_hour_createapp</stringProp>
            <stringProp name="Argument.value">8</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="minute_createapp" elementType="Argument">
            <stringProp name="Argument.name">minute_createapp</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="loginemail" elementType="Argument">
            <stringProp name="Argument.name">loginemail</stringProp>
            <stringProp name="Argument.value">intune_user7@staod.onmicrosoft.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="end_hour_createapp" elementType="Argument">
            <stringProp name="Argument.name">end_hour_createapp</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="year" elementType="Argument">
            <stringProp name="Argument.name">year</stringProp>
            <stringProp name="Argument.value">2023</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tomorrow" elementType="Argument">
            <stringProp name="Argument.name">tomorrow</stringProp>
            <stringProp name="Argument.value">23</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="today" elementType="Argument">
            <stringProp name="Argument.name">today</stringProp>
            <stringProp name="Argument.value">22</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="update_subject" elementType="Argument">
            <stringProp name="Argument.name">update_subject</stringProp>
            <stringProp name="Argument.value">check recurring update</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="event_id_update" elementType="Argument">
            <stringProp name="Argument.name">event_id_update</stringProp>
            <stringProp name="Argument.value">AAMkADVmMGE5N2JkLTA5YTctNGQ4Ny04Yzc1LWM3NGIyMjc3Y2JiMwBGAAAAAAAqiXPBA07LQJucOdoHLJoqBwBuH95HxnExS48j2hrvbu8yAAAAAAENAABuH95HxnExS48j2hrvbu8yAAAMQqBtAAA=</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FlooplanID" elementType="Argument">
            <stringProp name="Argument.name">FlooplanID</stringProp>
            <stringProp name="Argument.value">104</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ResourceID" elementType="Argument">
            <stringProp name="Argument.name">ResourceID</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserID" elementType="Argument">
            <stringProp name="Argument.name">UserID</stringProp>
            <stringProp name="Argument.value">e7ef898d-2113-4377-bb19-c18cc8767911</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Resource_create_update" elementType="Argument">
            <stringProp name="Argument.name">Resource_create_update</stringProp>
            <stringProp name="Argument.value">mproom1@aoprc.onmicrosoft.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UID_update" elementType="Argument">
            <stringProp name="Argument.name">UID_update</stringProp>
            <stringProp name="Argument.value">040000008200E00074C5B7101A82E008000000005E040022CD47D701000000000000000010000000A344A9D8E1C7714585E11F554D6F86C0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SearchResourceByResource_Id" elementType="Argument">
            <stringProp name="Argument.name">SearchResourceByResource_Id</stringProp>
            <stringProp name="Argument.value">a6ddbc6e-59a4-4204-8288-b8ca82b019b9</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetFloorplanByAppointment_id" elementType="Argument">
            <stringProp name="Argument.name">GetFloorplanByAppointment_id</stringProp>
            <stringProp name="Argument.value">a6ddbc6e-59a4-4204-8288-b8ca82b019b9</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SearchResourceByResourceId_mproom1" elementType="Argument">
            <stringProp name="Argument.name">SearchResourceByResourceId_mproom1</stringProp>
            <stringProp name="Argument.value">5dbdba35-cdc6-4e03-be60-2665439b63f4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SSOLogin_user" elementType="Argument">
            <stringProp name="Argument.name">SSOLogin_user</stringProp>
            <stringProp name="Argument.value">aopjbr@aoprc.onmicrosoft.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="month_update_reservation" elementType="Argument">
            <stringProp name="Argument.name">month_update_reservation</stringProp>
            <stringProp name="Argument.value">7</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="day_update_reservation" elementType="Argument">
            <stringProp name="Argument.name">day_update_reservation</stringProp>
            <stringProp name="Argument.value">3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="hour_update_reservation" elementType="Argument">
            <stringProp name="Argument.name">hour_update_reservation</stringProp>
            <stringProp name="Argument.value">19</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="start_minute_update_reservation" elementType="Argument">
            <stringProp name="Argument.name">start_minute_update_reservation</stringProp>
            <stringProp name="Argument.value">00</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="end_minute_update_reservation" elementType="Argument">
            <stringProp name="Argument.name">end_minute_update_reservation</stringProp>
            <stringProp name="Argument.value">30</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="email_update_reservation" elementType="Argument">
            <stringProp name="Argument.name">email_update_reservation</stringProp>
            <stringProp name="Argument.value">chi_org@aoprc.onmicrosoft.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UID_update_reservation" elementType="Argument">
            <stringProp name="Argument.name">UID_update_reservation</stringProp>
            <stringProp name="Argument.value">040000008200E00074C5B7101A82E008000000006D3ED1885958D7010000000000000000100000005B7319113180244EB49F04B1C10D16B9</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Login_email_findcolleague" elementType="Argument">
            <stringProp name="Argument.name">Login_email_findcolleague</stringProp>
            <stringProp name="Argument.value">vietth@aoprc.onmicrosoft.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ListAppointmentPaggingByResource_ResourceID" elementType="Argument">
            <stringProp name="Argument.name">ListAppointmentPaggingByResource_ResourceID</stringProp>
            <stringProp name="Argument.value">5dbdba35-cdc6-4e03-be60-2665439b63f4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ListAppointmentPaggingByResource_UserID_chi_org" elementType="Argument">
            <stringProp name="Argument.name">ListAppointmentPaggingByResource_UserID_chi_org</stringProp>
            <stringProp name="Argument.value">e5da15f8-6672-46e0-ba90-e970b8f7f753</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TimeZone" elementType="Argument">
            <stringProp name="Argument.name">TimeZone</stringProp>
            <stringProp name="Argument.value">Asia/Bangkok</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IsAllDay_false" elementType="Argument">
            <stringProp name="Argument.name">IsAllDay_false</stringProp>
            <stringProp name="Argument.value">false</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IsAllDay_true" elementType="Argument">
            <stringProp name="Argument.name">IsAllDay_true</stringProp>
            <stringProp name="Argument.value">true</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="delayBetween" elementType="Argument">
            <stringProp name="Argument.name">delayBetween</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Property File Reader" enabled="true">
        <stringProp name="propFilePath">D:\jemter\apache-jmeter-5.6.2\apache-jmeter-5.6.2\bin\addontemplate\DSSTestCase\my.properties</stringProp>
      </com.tag.jmeter.ext.config.PropertyReader>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Workspace_variable" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="TokenDelegatedPermission" elementType="Argument">
            <stringProp name="Argument.value">eyJ0eXAiOiJKV1QiLCJub25jZSI6IldQWnVEQWlWR0ZiTmVNblF2OEozb2RveEhnN21faG55akgwc3RNeUUtRm8iLCJhbGciOiJSUzI1NiIsIng1dCI6IlQxU3QtZExUdnlXUmd4Ql82NzZ1OGtyWFMtSSIsImtpZCI6IlQxU3QtZExUdnlXUmd4Ql82NzZ1OGtyWFMtSSJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC8xZjMyYjA0OS0yOWQxLTQ0YmEtODc3Yi1hNjM0YWVkMjEwOWQvIiwiaWF0IjoxNzAwNjQ3MTczLCJuYmYiOjE3MDA2NDcxNzMsImV4cCI6MTcwMDY1MTk4NSwiYWNjdCI6MCwiYWNyIjoiMSIsImFpbyI6IkFUUUF5LzhWQUFBQVhtN2E0YTF5UW9YVVpTc3kyV2twbUU4MVg3TVRldFN3dURCSXpNYS9HYlM3QnNMV296ai9Dc0luTnZ4ZUwvcFoiLCJhbXIiOlsicHdkIl0sImFwcF9kaXNwbGF5bmFtZSI6IkRTU1dvcmtzcGFjZS5EZWxlZ2F0ZWRQZXJtaXNzb24iLCJhcHBpZCI6IjU1OWExZTM1LTNhOTAtNGE2MC1iNWU3LTQ1NGY3NWVhYzcxOCIsImFwcGlkYWNyIjoiMCIsImdpdmVuX25hbWUiOiJpbnR1bmVfdXNlcjgiLCJpZHR5cCI6InVzZXIiLCJpcGFkZHIiOiIxMTMuMTkwLjI0Mi4xNTUiLCJuYW1lIjoiaW50dW5lX3VzZXI4Iiwib2lkIjoiZTdlZjg5OGQtMjExMy00Mzc3LWJiMTktYzE4Y2M4NzY3OTExIiwicGxhdGYiOiIxIiwicHVpZCI6IjEwMDMyMDAxQjA0NEE3QzEiLCJyaCI6IjAuQVhBQVNiQXlIOUVwdWtTSGU2WTBydElRblFNQUFBQUFBQUFBd0FBQUFBQUFBQURFQU40LiIsInNjcCI6IkNhbGVuZGFycy5SZWFkV3JpdGUgQ29udGFjdHMuUmVhZCBEZXZpY2VNYW5hZ2VtZW50QXBwcy5SZWFkLkFsbCBEZXZpY2VNYW5hZ2VtZW50QXBwcy5SZWFkV3JpdGUuQWxsIERldmljZU1hbmFnZW1lbnRDb25maWd1cmF0aW9uLlJlYWQuQWxsIERldmljZU1hbmFnZW1lbnRDb25maWd1cmF0aW9uLlJlYWRXcml0ZS5BbGwgRGV2aWNlTWFuYWdlbWVudE1hbmFnZWREZXZpY2VzLlByaXZpbGVnZWRPcGVyYXRpb25zLkFsbCBEZXZpY2VNYW5hZ2VtZW50TWFuYWdlZERldmljZXMuUmVhZC5BbGwgRGV2aWNlTWFuYWdlbWVudE1hbmFnZWREZXZpY2VzLlJlYWRXcml0ZS5BbGwgRGlyZWN0b3J5LkFjY2Vzc0FzVXNlci5BbGwgRGlyZWN0b3J5LlJlYWQuQWxsIFVzZXIuUmVhZCBVc2VyLlJlYWQuQWxsIHByb2ZpbGUgb3BlbmlkIGVtYWlsIiwic2lnbmluX3N0YXRlIjpbImttc2kiXSwic3ViIjoiaVBDbmVzSGxyaV9pX2dJYTJlZ3Q3cTdZMzluUW9LRGRVRjJDenRqVXQyTSIsInRlbmFudF9yZWdpb25fc2NvcGUiOiJBUyIsInRpZCI6IjFmMzJiMDQ5LTI5ZDEtNDRiYS04NzdiLWE2MzRhZWQyMTA5ZCIsInVuaXF1ZV9uYW1lIjoiaW50dW5lX3VzZXI4QHN0YW9kLm9ubWljcm9zb2Z0LmNvbSIsInVwbiI6ImludHVuZV91c2VyOEBzdGFvZC5vbm1pY3Jvc29mdC5jb20iLCJ1dGkiOiJ0UHBMSkpzRlRFLTlOX3hQcnZOT0FBIiwidmVyIjoiMS4wIiwid2lkcyI6WyJiNzlmYmY0ZC0zZWY5LTQ2ODktODE0My03NmIxOTRlODU1MDkiXSwieG1zX3N0Ijp7InN1YiI6Im5CM09GZDM5VWM2czdOS2s1LThIaEo2Y09hcGplQ2JKcjhpaWt4aktucEEifSwieG1zX3RjZHQiOjE1Nzc3ODI3MjZ9.gP7J7vK41pKdBiNvQ7C2gavw9bbB7pIAShOTUEMX4ExuMK2I0gRgf4XCxQsDlEA8QPCmDPQ_T4FcjrFPGEzQwdk_XTLBbCUj6lxmZMN1ZwS_6d0kc_-sJRaRvTmf_k5krBfXiNg7yAypjFrJ7hIRCl_qha1VD2BByjzjwwpOmPk5J8Q4tf2V_vhvQvqguDp1LVFH77j72ssKIn4oepc2OyDTgxz-Dph9_DsaznDpQAggzNAxvwOUM-jZYZ2qdMZv8pOYX6uSf9_EXL5xzit1wpU6uDIjY1Jiv-QK5HL1ETP2EdWX-41eoDrkh6qDiMfpZTNnT2BrlzxYo0fLB9Q5aw </stringProp>
            <stringProp name="Argument.name">TokenDelegatedPermission</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LoginEmailArray" elementType="Argument">
            <stringProp name="Argument.name">LoginEmailArray</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">intune_user7@staod.onmicrosoft.com,intune_user8@staod.onmicrosoft.com,intune_user9@staod.onmicrosoft.com</stringProp>
          </elementProp>
          <elementProp name="LoginUserIDArray" elementType="Argument">
            <stringProp name="Argument.name">LoginUserIDArray</stringProp>
            <stringProp name="Argument.value">d678b1de-89d2-4da0-9bf5-9dba2d37def0,e7ef898d-2113-4377-bb19-c18cc8767911,3c329bf0-fd81-4e5c-a71e-d13651266258</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SubjectUpdateArray" elementType="Argument">
            <stringProp name="Argument.name">SubjectUpdateArray</stringProp>
            <stringProp name="Argument.value">test auto 1,test auto 2,test auto 33,test auto update 222</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TimeSpan" elementType="Argument">
            <stringProp name="Argument.name">TimeSpan</stringProp>
            <stringProp name="Argument.value">5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Is365" elementType="Argument">
            <stringProp name="Argument.name">Is365</stringProp>
            <stringProp name="Argument.value">true</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SearchResource_Text" elementType="Argument">
            <stringProp name="Argument.name">SearchResource_Text</stringProp>
            <stringProp name="Argument.value">room301</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rowsPerPage" elementType="Argument">
            <stringProp name="Argument.name">rowsPerPage</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FindColleague_Text" elementType="Argument">
            <stringProp name="Argument.name">FindColleague_Text</stringProp>
            <stringProp name="Argument.value">int</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="pre-datenow" enabled="true">
        <stringProp name="scriptLanguage">javascript</stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="cacheKey">true</stringProp>
        <stringProp name="script">function addDays(date, days) {
  date.setDate(date.getDate() + days);
  return date;
}

var dateNowUTCObject = new Date(new Date().setHours(0,0,0,0));
var tomorrowUTCObject = addDays(new Date(new Date().setHours(0,0,0,0)), 1);
var timeRunTestPlan = new Date();

vars.put(&apos;utcDateNow&apos;, dateNowUTCObject.getUTCDate());
vars.put(&apos;utcMonthNow&apos;, dateNowUTCObject.getUTCMonth() + 1);
vars.put(&apos;utcYearNow&apos;, dateNowUTCObject.getUTCFullYear());
vars.put(&apos;utcHourNow&apos;, dateNowUTCObject.getUTCHours());
vars.put(&apos;utcMinutesNow&apos;, dateNowUTCObject.getUTCMinutes());
vars.put(&apos;utcSecondsNow&apos;, dateNowUTCObject.getUTCSeconds());

vars.put(&apos;utcDateTomorrow&apos;, tomorrowUTCObject.getUTCDate());
vars.put(&apos;utcMonthTomorrow&apos;, tomorrowUTCObject.getUTCMonth() + 1);
vars.put(&apos;utcYearTomorrow&apos;, tomorrowUTCObject.getUTCFullYear());
vars.put(&apos;utcHourTomorrow&apos;, tomorrowUTCObject.getUTCHours());
vars.put(&apos;utcMinutesTomorrow&apos;, tomorrowUTCObject.getUTCMinutes());
vars.put(&apos;utcSecondsTomorrow&apos;, tomorrowUTCObject.getUTCSeconds());

vars.put(&apos;utcTimeRunTestPlan_Date&apos;, timeRunTestPlan.getDate());
vars.put(&apos;utcTimeRunTestPlan_Month&apos;, timeRunTestPlan.getMonth() + 1);
vars.put(&apos;utcTimeRunTestPlan_Year&apos;, timeRunTestPlan.getFullYear());
vars.put(&apos;utcTimeRunTestPlan_Hours&apos;, timeRunTestPlan.getHours());
vars.put(&apos;utcTimeRunTestPlan_Minutes&apos;, timeRunTestPlan.getMinutes());
vars.put(&apos;utcTimeRunTestPlan_Seconds&apos;, timeRunTestPlan.getSeconds());</stringProp>
      </JSR223PreProcessor>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DSClient Thread" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">3</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">3</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">1800</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="DSClient Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="apiurl" elementType="Argument">
              <stringProp name="Argument.name">apiurl</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.value">api/v4.3/Client</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IsServiceAlive" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.path">/${sitename}/digitalsignwebservice/webservice</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${delayBetween}</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetAuthenticationInfo" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;ClientID&quot;: &quot;4bbf9925-f00d-480a-91db-3738079af037&quot;,&#xd;
  &quot;ClientSecret&quot;: &quot;alNZcVlNM2ZyRWpLTDhaVm1TUEJyclcwcXgwWjIreXVpTVhCWWQ5N2h3Yz0=&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.path">/${sitename}/${apiurl}/GetAuthenticationInfo</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${delayBetween}</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">${delayBetween}</stringProp>
            <stringProp name="RandomTimer.range">${delayBetween}</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetChangeInfo" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;MacAddress&quot;: &quot;Yqo6zFK0WR0fHF1rhFe3gVattiQEcbxDDdUCDTmSks&quot;,&#xd;
	&quot;ClientDateModified&quot;: {&#xd;
		&quot;Year&quot;: 2023,&#xd;
		&quot;Month&quot;: 12,&#xd;
		&quot;Day&quot;: 20,&#xd;
		&quot;Hour&quot;: 0,&#xd;
		&quot;Second&quot;: 0,&#xd;
		&quot;Minute&quot;: 0&#xd;
	},&#xd;
	&quot;DeviceTime&quot;: &quot;&quot;,&#xd;
	&quot;DeviceBaseUtcOffset&quot;: &quot;&quot;,&#xd;
	&quot;DeviceStandardName&quot;: &quot;&quot;,&#xd;
	&quot;ResourceEventModified&quot;: &#xd;
	[&#xd;
		{&#xd;
			&quot;EventDateModified&quot;: {&#xd;
				&quot;Year&quot;: 2023,&#xd;
				&quot;Month&quot;: 12,&#xd;
				&quot;Day&quot;: 20,&#xd;
				&quot;Hour&quot;: 0,&#xd;
				&quot;Second&quot;: 0,&#xd;
				&quot;Minute&quot;: 0&#xd;
			},&#xd;
			&quot;ResourceEmail&quot;: &quot;&quot;&#xd;
		}&#xd;
	],&#xd;
	&quot;TemplateName&quot;: &quot;&quot;,&#xd;
	&quot;TemplateModifiedDate&quot;: {&#xd;
		&quot;Year&quot;: 2023,&#xd;
		&quot;Month&quot;: 12,&#xd;
		&quot;Day&quot;: 20,&#xd;
		&quot;Hour&quot;: 0,&#xd;
		&quot;Second&quot;: 0,&#xd;
		&quot;Minute&quot;: 0&#xd;
	}&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.path">/${sitename}/${apiurl}/GetChangeInfo</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${delayBetween}</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SaveSettingClient" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;DeviceID&quot;: &quot;Yqo6zFK0WR0fHF1rhFe3gVattiQEcbxDDdUCDTmSks&quot;,&#xd;
  &quot;DeviceName&quot;: &quot;Yqo6zFK0WR0fHF1rhFe3gVattiQEcbxDDdUCDTmSks&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.path">/${sitename}/${apiurl}/SaveSettingClient</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${delayBetween}</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetListVisibleResourceByMacAddress" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;MacAddress&quot;: &quot;Yqo6zFK0WR0fHF1rhFe3gVattiQEcbxDDdUCDTmSks&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.path">/${sitename}/${apiurl}/GetListVisibleResourceByMacAddress</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${delayBetween}</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetListEventByResourceEmail" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;ListResourceEmail&quot;: [&#xd;
    &quot;room2000_upn@staod.onmicrosoft.com&quot;,&#xd;
    &quot;room2002@staod.onmicrosoft.com&quot;,&#xd;
    &quot;room2003@staod.onmicrosoft.com&quot;,&#xd;
    &quot;room2004@staod.onmicrosoft.com&quot;,&#xd;
    &quot;room2005@staod.onmicrosoft.com&quot;&#xd;
  ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.path">/${sitename}/${apiurl}/GetListEventByResourceEmail</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${delayBetween}</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SendHeartBeat" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;DeviceName&quot;: null,&#xd;
  &quot;MacAddress&quot;: &quot;Yqo6zFK0WR0fHF1rhFe3gVattiQEcbxDDdUCDTmSks&quot;,&#xd;
  &quot;HeartBeatData&quot;: &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;utf-8\&quot;?&gt;\r\n&lt;HeartBeat xmlns:xsi=\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot; xmlns:xsd=\&quot;http://www.w3.org/2001/XMLSchema\&quot;&gt;\r\n  &lt;ClientDateModified&gt;2023-11-22 02:28:54&lt;/ClientDateModified&gt;\r\n  &lt;Manufacturer&gt;Dell Inc.&lt;/Manufacturer&gt;\r\n  &lt;Platform&gt;UWP 10.0.22000.2600&lt;/Platform&gt;\r\n  &lt;DeviceType&gt;Desktop&lt;/DeviceType&gt;\r\n  &lt;DeviceID&gt;Yqo6zFK0WR0fHF1rhFe3gVattiQEcbxDDdUCDTmSks&lt;/DeviceID&gt;\r\n  &lt;DeviceTime&gt;2023-11-22 09:28:54&lt;/DeviceTime&gt;\r\n  &lt;DeviceBaseUtcOffset&gt;(UTC+07:00)&lt;/DeviceBaseUtcOffset&gt;\r\n  &lt;DeviceStandardName&gt;(UTC+07:00) Bangkok, Hanoi, Jakarta&lt;/DeviceStandardName&gt;\r\n  &lt;DeviceIP&gt;172.19.96.1&lt;/DeviceIP&gt;\r\n  &lt;DeviceWidth&gt;1920&lt;/DeviceWidth&gt;\r\n  &lt;DeviceHeight&gt;1080&lt;/DeviceHeight&gt;\r\n  &lt;Model&gt;OptiPlex 3050&lt;/Model&gt;\r\n  &lt;DSSClientVersion&gt;4.3.8103.0&lt;/DSSClientVersion&gt;\r\n  &lt;Resources&gt;\r\n    &lt;Resource&gt;\r\n      &lt;RoomName&gt;room2000 update&lt;/RoomName&gt;\r\n      &lt;RoomEmail&gt;room2000_upn@staod.onmicrosoft.com&lt;/RoomEmail&gt;\r\n    &lt;/Resource&gt;\r\n    &lt;Resource&gt;\r\n      &lt;RoomName&gt;room2002&lt;/RoomName&gt;\r\n      &lt;RoomEmail&gt;room2002@staod.onmicrosoft.com&lt;/RoomEmail&gt;\r\n    &lt;/Resource&gt;\r\n    &lt;Resource&gt;\r\n      &lt;RoomName&gt;room2003&lt;/RoomName&gt;\r\n      &lt;RoomEmail&gt;room2003@staod.onmicrosoft.com&lt;/RoomEmail&gt;\r\n    &lt;/Resource&gt;\r\n    &lt;Resource&gt;\r\n      &lt;RoomName&gt;room2004 update&lt;/RoomName&gt;\r\n      &lt;RoomEmail&gt;room2004@staod.onmicrosoft.com&lt;/RoomEmail&gt;\r\n    &lt;/Resource&gt;\r\n    &lt;Resource&gt;\r\n      &lt;RoomName&gt;room2005&lt;/RoomName&gt;\r\n      &lt;RoomEmail&gt;room2005@staod.onmicrosoft.com&lt;/RoomEmail&gt;\r\n    &lt;/Resource&gt;\r\n  &lt;/Resources&gt;\r\n  &lt;ConfigurationManagedBy&gt;Server&lt;/ConfigurationManagedBy&gt;\r\n  &lt;ConfigurationName&gt;Yqo6zFK0WR0fHF1rhFe3gVattiQEcbxDDdUCDTmSks.xml&lt;/ConfigurationName&gt;\r\n  &lt;TemplateName&gt;Polished (1920x1080) 4.3.6 English.xml&lt;/TemplateName&gt;\r\n  &lt;IsRemoteTemplate&gt;True&lt;/IsRemoteTemplate&gt;\r\n  &lt;DSSTemplateSupportedVersion&gt;1.0,4.0,4.1.0,4.1.3,4.2.0,4.3.0,4.3.1,4.3.2,4.3.3,4.3.4,4.3.5,4.3.6&lt;/DSSTemplateSupportedVersion&gt;\r\n  &lt;DSSConfigurationSupportedVersion&gt;1.0,4.0,4.1.0,4.1.3,4.2.0,4.3.0,4.3.1,4.3.2,4.3.3,4.3.4,4.3.5,4.3.6&lt;/DSSConfigurationSupportedVersion&gt;\r\n&lt;/HeartBeat&gt;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.path">/${sitename}/${apiurl}/SendHeartBeat</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${delayBetween}</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateActionHistory" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;DeviceID&quot;: &quot;Yqo6zFK0WR0fHF1rhFe3gVattiQEcbxDDdUCDTmSks&quot;,&#xd;
  &quot;ActionName&quot;: &quot;NEW EVENT FILE&quot;,&#xd;
  &quot;Message&quot;: &quot;Device has received new event file&quot;,&#xd;
  &quot;DisplayName&quot;: &quot;Meeting Directory Sign&quot;,&#xd;
  &quot;Email&quot;: &quot;&quot;,&#xd;
  &quot;Status&quot;: 0&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.path">/${sitename}/${apiurl}/CreateActionHistory</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${delayBetween}</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetLocationPathByMacAddress" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;MacAddress&quot;: &quot;Yqo6zFK0WR0fHF1rhFe3gVattiQEcbxDDdUCDTmSks&quot;,&#xd;
  &quot;IsFullPath&quot;: false&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.path">/${sitename}/${apiurl}/GetLocationPathByMacAddress</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${delayBetween}</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetScheduleFile" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.path">/${sitename}/Clients/Signs/Schedule/Schedule_room2002_staod.onmicrosoft.com.xml</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetEventFile" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.path">/${sitename}/Clients/Signs/Events/room2000_upn_staod.onmicrosoft.com.xml</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${delayBetween}</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetSubjectList" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;Email&quot;: &quot;room2015@staod.onmicrosoft.com&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.path">/${sitename}/${apiurl}/GetSubjectList</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${delayBetween}</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ValidateOpeningHourResource" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;Email&quot;: &quot;room2015@staod.onmicrosoft.com&quot;,&#xd;
  &quot;StartDate&quot;: {&#xd;
    &quot;Year&quot;: 2023,&#xd;
    &quot;Month&quot;: 11,&#xd;
    &quot;Day&quot;: 22,&#xd;
    &quot;Hour&quot;: 9,&#xd;
    &quot;Minute&quot;: 43&#xd;
  },&#xd;
  &quot;EndDate&quot;: {&#xd;
    &quot;Year&quot;: 2023,&#xd;
    &quot;Month&quot;: 11,&#xd;
    &quot;Day&quot;: 22,&#xd;
    &quot;Hour&quot;: 9,&#xd;
    &quot;Minute&quot;: 43&#xd;
  },&#xd;
  &quot;Timezone&quot;: &quot;SE Asia Standard Time&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.path">/${sitename}/${apiurl}/ValidateOpeningHourResource</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${delayBetween}</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetCategoryListByResourceEmail" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;ListResourceEmail&quot;: [&#xd;
    &quot;room2015@staod.onmicrosoft.com&quot;&#xd;
  ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.path">/${sitename}/${apiurl}/GetCategoryListByResourceEmail</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${delayBetween}</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetEncryptedPassword" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;Email&quot;: &quot;room2015@staod.onmicrosoft.com&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.path">/${sitename}/${apiurl}/GetEncryptedPassword</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${delayBetween}</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetVisibleLocationByFloorplanId" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;FloorplanID&quot;: 2&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.path">/${sitename}/${apiurl}/GetVisibleLocationByFloorplanId</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${delayBetween}</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchFloorplan" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;FloorPlanStr&quot;: &quot;2&quot;,&#xd;
  &quot;IncludeSubLocation&quot;: false&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.path">/${sitename}/${apiurl}/SearchFloorplan</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${delayBetween}</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetFloorplanDetail" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;ResourceTypeID&quot;: 1,&#xd;
  &quot;FlooplanID&quot;: 2,&#xd;
  &quot;StartTime&quot;: {&#xd;
    &quot;Year&quot;: 2023,&#xd;
    &quot;Month&quot;: 11,&#xd;
    &quot;Day&quot;: 22,&#xd;
    &quot;Hour&quot;: 2,&#xd;
    &quot;Minute&quot;: 55&#xd;
  },&#xd;
  &quot;EndTime&quot;: {&#xd;
    &quot;Year&quot;: 2023,&#xd;
    &quot;Month&quot;: 11,&#xd;
    &quot;Day&quot;: 22,&#xd;
    &quot;Hour&quot;: 16,&#xd;
    &quot;Minute&quot;: 59&#xd;
  },&#xd;
  &quot;IsAllDay&quot;: false,&#xd;
  &quot;Is365&quot;: true&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.path">/${sitename}/${apiurl}/GetFloorplanDetail</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${delayBetween}</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetListVisibleResourceKioskModeByMacAddress" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;MacAddress&quot;: &quot;Yqo6zFK0WR0fHF1rhFe3gVattiQEcbxDDdUCDTmSks&quot;,&#xd;
  &quot;StartTime&quot;: {&#xd;
    &quot;Year&quot;: 2023,&#xd;
    &quot;Month&quot;: 11,&#xd;
    &quot;Day&quot;: 22,&#xd;
    &quot;Hour&quot;: 2,&#xd;
    &quot;Minute&quot;: 55&#xd;
  },&#xd;
  &quot;EndTime&quot;: {&#xd;
    &quot;Year&quot;: 2023,&#xd;
    &quot;Month&quot;: 11,&#xd;
    &quot;Day&quot;: 22,&#xd;
    &quot;Hour&quot;: 17,&#xd;
    &quot;Minute&quot;: 0&#xd;
  },&#xd;
  &quot;SignType&quot;: 5&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.path">/${sitename}/${apiurl}/GetListVisibleResourceKioskModeByMacAddress</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${delayBetween}</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="End Result" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Search,Create - WS" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">40</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">12000</stringProp>
        <stringProp name="ThreadGroup.delay">10000</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="SearchResource_ResourceType" elementType="Argument">
              <stringProp name="Argument.name">SearchResource_ResourceType</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.value">1</stringProp>
            </elementProp>
            <elementProp name="SearchAttendees_Text" elementType="Argument">
              <stringProp name="Argument.name">SearchAttendees_Text</stringProp>
              <stringProp name="Argument.value">mt@</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreParam" enabled="true">
          <stringProp name="scriptLanguage">javascript</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}

function SelectTypeSearchResource()
{
	var valSwitch = getRandomInt(3);
	var valExecuteGetCategories = getRandomInt(3)
	var isExecuteSearchResourceByKeyBoard = false;
	var isExecuteSearchResourceByQRCode = false;
	var isExecuteSearchResourceByFloorplan = false;
	
	switch(valSwitch)
	{
		case 0:
			isExecuteSearchResourceByKeyBoard = true;
			break;
		case 1:
			var qrSearch_UserId = props.get(&quot;QRSearch_UserId&quot;);
			if(qrSearch_UserId != &quot;Empty&quot;)
			{
				isExecuteSearchResourceByQRCode = true;
			}
			break;
		case 2:
			isExecuteSearchResourceByFloorplan = true;
			break;
		default:
			break;
	}

	vars.put(&quot;isExecuteSearchResourceByKeyBoard&quot;, isExecuteSearchResourceByKeyBoard);
	vars.put(&quot;isExecuteSearchResourceByQRCode&quot;, isExecuteSearchResourceByQRCode);
	vars.put(&quot;isExecuteSearchResourceByFloorplan&quot;, isExecuteSearchResourceByFloorplan);
}

function PreParamSearchResource() 
{
	var startTime = new Date(new Date(vars.get(&quot;utcTimeRunTestPlan_Year&quot;),vars.get(&quot;utcTimeRunTestPlan_Month&quot;)-1,vars.get(&quot;utcTimeRunTestPlan_Date&quot;),vars.get(&quot;utcTimeRunTestPlan_Hours&quot;),vars.get(&quot;utcTimeRunTestPlan_Minutes&quot;),vars.get(&quot;utcTimeRunTestPlan_Seconds&quot;)).getTime() + parseInt(props.get(&quot;TimeSpanToNextBookTime&quot;))*60*1000);
	var endTime = new Date(new Date(vars.get(&quot;utcTimeRunTestPlan_Year&quot;),vars.get(&quot;utcTimeRunTestPlan_Month&quot;)-1,vars.get(&quot;utcTimeRunTestPlan_Date&quot;),vars.get(&quot;utcTimeRunTestPlan_Hours&quot;),vars.get(&quot;utcTimeRunTestPlan_Minutes&quot;),vars.get(&quot;utcTimeRunTestPlan_Seconds&quot;)).getTime() + parseInt(props.get(&quot;TimeSpanToNextBookTime&quot;))*60*1000 + parseInt(vars.get(&quot;TimeSpan&quot;))*60*1000);
	
	vars.put(&apos;BookParam_StartTime_Date&apos;, startTime.getDate());
	vars.put(&apos;BookParam_StartTime_Month&apos;, startTime.getMonth() + 1);
	vars.put(&apos;BookParam_StartTime_Year&apos;, startTime.getFullYear());
	vars.put(&apos;BookParam_StartTime_Hours&apos;, startTime.getHours());
	vars.put(&apos;BookParam_StartTime_Minutes&apos;, startTime.getMinutes());
	vars.put(&apos;BookParam_StartTime_Seconds&apos;, startTime.getSeconds());
	
	vars.put(&apos;BookParam_StartTime_UTCDate&apos;, startTime.getUTCDate());
	vars.put(&apos;BookParam_StartTime_UTCMonth&apos;, startTime.getUTCMonth() + 1);
	vars.put(&apos;BookParam_StartTime_UTCYear&apos;, startTime.getUTCFullYear());
	vars.put(&apos;BookParam_StartTime_UTCHours&apos;, startTime.getUTCHours());
	vars.put(&apos;BookParam_StartTime_UTCMinutes&apos;, startTime.getUTCMinutes());
	vars.put(&apos;BookParam_StartTime_UTCSeconds&apos;, startTime.getUTCSeconds());

	vars.put(&apos;BookParam_EndTime_Date&apos;, endTime.getDate());
	vars.put(&apos;BookParam_EndTime_Month&apos;, endTime.getMonth() + 1);
	vars.put(&apos;BookParam_EndTime_Year&apos;, endTime.getFullYear());
	vars.put(&apos;BookParam_EndTime_Hours&apos;, endTime.getHours());
	vars.put(&apos;BookParam_EndTime_Minutes&apos;, endTime.getMinutes());
	vars.put(&apos;BookParam_EndTime_Seconds&apos;, endTime.getSeconds());
	
	vars.put(&apos;BookParam_EndTime_UTCDate&apos;, endTime.getUTCDate());
	vars.put(&apos;BookParam_EndTime_UTCMonth&apos;, endTime.getUTCMonth() + 1);
	vars.put(&apos;BookParam_EndTime_UTCYear&apos;, endTime.getUTCFullYear());
	vars.put(&apos;BookParam_EndTime_UTCHours&apos;, endTime.getUTCHours());
	vars.put(&apos;BookParam_EndTime_UTCMinutes&apos;, endTime.getUTCMinutes());
	vars.put(&apos;BookParam_EndTime_UTCSeconds&apos;, endTime.getUTCSeconds());
}

PreParamSearchResource();
SelectTypeSearchResource();</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <com.blazemeter.jmeter.http.ParallelHTTPSampler guiclass="com.blazemeter.jmeter.http.ParallelHTTPSamplerGui" testclass="com.blazemeter.jmeter.http.ParallelHTTPSampler" testname="jp@gc - Parallel HTTP Requests" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <boolProp name="HTTPSampler.image_parser">true</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
          <collectionProp name="urls"/>
        </com.blazemeter.jmeter.http.ParallelHTTPSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isExecuteSearchResourceByKeyBoard" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="IfController.condition">${isExecuteSearchResourceByKeyBoard}</stringProp>
        </IfController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Before Execute Search Resource By KeyBoard" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}

function Prepare()
{
	var valExecuteGetFloorplan = getRandomInt(3);
	var IsExecuteGetAllFloorplanToCreateReservation = false;
	var IsExecuteGetFloorplanById = false;
	var searchFloorId = props.get(&quot;SearchFloorId&quot;);
	log.info(&quot;tlminh: &quot; + searchFloorId);
	var isExecuteGetCategories = false;
	switch(valExecuteGetFloorplan)
	{
		case 1:
			IsExecuteGetAllFloorplanToCreateReservation = true;
			break;
		default:
			break;	
	}

	if(searchFloorId != -1)
	{
		IsExecuteGetFloorplanById = true;
		vars.put(&quot;GetFloorplanById_FloorId&quot;, searchFloorId);
	}

	if(getRandomInt(2) == 0)
	{
		isExecuteGetCategories = true;
	}

	vars.put(&quot;IsExecuteGetAllFloorplanToCreateReservation&quot;, IsExecuteGetAllFloorplanToCreateReservation);
	vars.put(&quot;IsExecuteGetFloorplanById&quot;, IsExecuteGetFloorplanById);
	vars.put(&quot;isExecuteGetCategories&quot;, isExecuteGetCategories);
}

Prepare();</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IsExecuteGetAllFloorplanToCreateReservation" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${IsExecuteGetAllFloorplanToCreateReservation}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetAllFloorplan" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/GetAllFloorplan</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">800</stringProp>
              </ConstantTimer>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="HandleGetAllFloorplan" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}

function HandleGetAllFloorplan()
{
	if(prev.getResponseDataAsString())
	{
		var listFloorplan = JSON.parse(prev.getResponseDataAsString());
		var countFloorplans = listFloorplan.length;
		if(countFloorplans &gt; 0)
		{						
			var floorplan = listFloorplan[getRandomInt(countFloorplans)];
			props.put(&quot;SearchFloorId&quot;,floorplan.Id);
		}
	}
}

HandleGetAllFloorplan();</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IsExecuteGetFloorplanById" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${IsExecuteGetFloorplanById}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetFloorplanById" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;FloorplanId&quot;: ${GetFloorplanById_FloorId}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/GetFloorplanById</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">400</stringProp>
                <stringProp name="RandomTimer.range">600</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isExecuteGetCategories" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${isExecuteGetCategories}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetListCategories" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;IsDefaultCategory&quot;: false,&#xd;
	&quot;LoginEmail&quot;: &quot;${loginemail}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/GetListCategories</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">400</stringProp>
                <stringProp name="RandomTimer.range">500</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchResourceByKeyBoard" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;LoginEmail&quot;: &quot;${loginemail}&quot;,&#xd;
    &quot;UserName&quot;: &quot;${loginemail}&quot;,&#xd;
    &quot;Name&quot;: &quot;${SearchResource_Text}&quot;,&#xd;
    &quot;ResourceType&quot;: ${SearchResource_ResourceType},&#xd;
    &quot;Is365&quot;: ${Is365},&#xd;
    &quot;StartTime&quot;: {&#xd;
        &quot;Year&quot;: ${BookParam_StartTime_UTCYear},&#xd;
        &quot;Month&quot;: ${BookParam_StartTime_UTCMonth},&#xd;
        &quot;Day&quot;: ${BookParam_StartTime_UTCDate},&#xd;
        &quot;Hour&quot;: ${BookParam_StartTime_UTCHours},&#xd;
        &quot;Minute&quot;: ${BookParam_StartTime_UTCMinutes},&#xd;
        &quot;Second&quot;: ${BookParam_StartTime_UTCSeconds}&#xd;
    },&#xd;
    &quot;EndTime&quot;: {&#xd;
        &quot;Year&quot;: ${BookParam_EndTime_UTCYear},&#xd;
        &quot;Month&quot;: ${BookParam_EndTime_UTCMonth},&#xd;
        &quot;Day&quot;: ${BookParam_EndTime_UTCDate},&#xd;
        &quot;Hour&quot;: ${BookParam_EndTime_UTCHours},&#xd;
        &quot;Minute&quot;: ${BookParam_EndTime_UTCMinutes},&#xd;
        &quot;Second&quot;: ${BookParam_EndTime_UTCSeconds}&#xd;
    },&#xd;
    &quot;IsAllDay&quot;: false,&#xd;
    &quot;FlooplanId&quot;: 0,&#xd;
    &quot;ListCategory&quot;: null,&#xd;
    &quot;ConditionFilterCategory&quot;: 1,&#xd;
    &quot;ConditionFilterCapacity&quot;: 1,&#xd;
    &quot;CapacityValue&quot;: 0&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/SearchResource</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="HandleSearchResource" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}

function HandleResponse()
{
	var isExecuteCheckBookAbleResource = false;
	var isExecuteGetEndTimeAvailableResource = false;
	if(prev.getResponseDataAsString())
	{
		var listResource = JSON.parse(prev.getResponseDataAsString());
		var countResources = listResource.length;
		if(countResources &gt; 0)
		{						
			var resourceBook = listResource[getRandomInt(countResources)];
			isExecuteCheckBookAbleResource = true;
			isExecuteGetEndTimeAvailableResource = true;
			vars.put(&quot;CheckBookableResource_Email&quot;, resourceBook.Email);
			vars.put(&quot;CheckBookableResource_ResourceTypeId&quot;, resourceBook.ResourceType);
			vars.put(&quot;CheckBookableResource_ResourceId&quot;, resourceBook.Id);
			
			vars.put(&quot;CreateAppointmentParam_Email&quot;, resourceBook.Email);
			vars.put(&quot;CreateAppointmentParam_ResourceTypeId&quot;, resourceBook.ResourceType);
			vars.put(&quot;CreateAppointmentParam_ResourceId&quot;, resourceBook.Id);
			vars.put(&quot;CreateAppointmentParam_UserId&quot;, resourceBook.UserID);

			props.put(&quot;QRSearch_Email&quot;, resourceBook.Email);
			props.put(&quot;QRSearch_ResourceTypeId&quot;, resourceBook.ResourceTypeID);
			props.put(&quot;QRSearch_ResourceId&quot;, resourceBook.Id);
			props.put(&quot;QRSearch_UserId&quot;, resourceBook.UserID);
		}
	}
	
	vars.put(&quot;isExecuteCheckBookAbleResource&quot;, isExecuteCheckBookAbleResource);
	vars.put(&quot;isExecuteGetEndTimeAvailableResource&quot;, 	isExecuteGetEndTimeAvailableResource);
}

HandleResponse();


</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="SearchResourceTime" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">1000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isExecuteGetEndTimeAvailableResource" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${isExecuteGetEndTimeAvailableResource}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetEndTimeAvailableResource" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;StartTime&quot;: {&#xd;
        &quot;Year&quot;: ${BookParam_StartTime_UTCYear},&#xd;
        &quot;Month&quot;: ${BookParam_StartTime_UTCMonth},&#xd;
        &quot;Day&quot;: ${BookParam_StartTime_UTCDate},&#xd;
        &quot;Hour&quot;: ${BookParam_StartTime_UTCHours},&#xd;
        &quot;Minute&quot;: ${BookParam_StartTime_UTCMinutes},&#xd;
        &quot;Second&quot;: ${BookParam_StartTime_UTCSeconds}&#xd;
    },&#xd;
    &quot;EndTime&quot;: {&#xd;
        &quot;Year&quot;: ${BookParam_EndTime_UTCYear},&#xd;
        &quot;Month&quot;: ${BookParam_EndTime_UTCMonth},&#xd;
        &quot;Day&quot;: ${BookParam_EndTime_UTCDate},&#xd;
        &quot;Hour&quot;: ${BookParam_EndTime_UTCHours},&#xd;
        &quot;Minute&quot;: ${BookParam_EndTime_UTCMinutes},&#xd;
        &quot;Second&quot;: ${BookParam_EndTime_UTCSeconds}&#xd;
    },&#xd;
	&quot;ResourceId&quot;: &quot;${CreateAppointmentParam_UserId}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/GetEndTimeAvailableResource</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">200</stringProp>
                <stringProp name="RandomTimer.range">200</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isExecuteSearchResourceByQRCode" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="IfController.condition">${isExecuteSearchResourceByQRCode}</stringProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchResourceByQRCode" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;LoginEmail&quot;: &quot;${loginemail}&quot;,&#xd;
    &quot;Id&quot;: &quot;${QRSearch_UserId}&quot;,&#xd;
    &quot;StartTime&quot;: {&#xd;
        &quot;Year&quot;: ${BookParam_StartTime_UTCYear},&#xd;
        &quot;Month&quot;: ${BookParam_StartTime_UTCMonth},&#xd;
        &quot;Day&quot;: ${BookParam_StartTime_UTCDate},&#xd;
        &quot;Hour&quot;: ${BookParam_StartTime_UTCHours},&#xd;
        &quot;Minute&quot;: ${BookParam_StartTime_UTCMinutes},&#xd;
        &quot;Second&quot;: ${BookParam_StartTime_UTCSeconds}&#xd;
    },&#xd;
    &quot;EndTime&quot;: {&#xd;
        &quot;Year&quot;: ${BookParam_EndTime_UTCYear},&#xd;
        &quot;Month&quot;: ${BookParam_EndTime_UTCMonth},&#xd;
        &quot;Day&quot;: ${BookParam_EndTime_UTCDate},&#xd;
        &quot;Hour&quot;: ${BookParam_EndTime_UTCHours},&#xd;
        &quot;Minute&quot;: ${BookParam_EndTime_UTCMinutes},&#xd;
        &quot;Second&quot;: ${BookParam_EndTime_UTCSeconds}&#xd;
    },&#xd;
    &quot;IsAllDay&quot;: false,&#xd;
    &quot;Is365&quot;: ${Is365}&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/SearchResourceById</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">500</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="HandleSearchResourceByQRCode" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">
function HandleResponse()
{
	var isExecuteCheckBookAbleResource = false;
	if(prev.getResponseDataAsString())
	{
		var resourceBook = JSON.parse(prev.getResponseDataAsString());	
		if(resourceBook &amp;&amp; resourceBook.ResourceTypesModel)
		{
			isExecuteCheckBookAbleResource = true;
		
			vars.put(&quot;CheckBookableResource_Email&quot;, resourceBook.Email);
			vars.put(&quot;CheckBookableResource_ResourceTypeId&quot;, resourceBook.ResourceTypesModel.Id);
			vars.put(&quot;CheckBookableResource_ResourceId&quot;, resourceBook.Id);
			
			vars.put(&quot;CreateAppointmentParam_Email&quot;, resourceBook.Email);
			vars.put(&quot;CreateAppointmentParam_ResourceTypeId&quot;, resourceBook.ResourceTypesModel.Id);
			vars.put(&quot;CreateAppointmentParam_ResourceId&quot;, resourceBook.Id);
			vars.put(&quot;CreateAppointmentParam_UserId&quot;, resourceBook.UserID);

			props.put(&quot;QRSearch_Email&quot;, &quot;Empty&quot;);
			props.put(&quot;QRSearch_ResourceTypeId&quot;, -1);
			props.put(&quot;QRSearch_ResourceId&quot;, -1);
			props.put(&quot;QRSearch_UserId&quot;, &quot;Empty&quot;);
		}
		
	}
	
	vars.put(&quot;isExecuteCheckBookAbleResource&quot;, isExecuteCheckBookAbleResource);
}

HandleResponse();


</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreParam" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">function preParam()
{
	var qrSearch_UserId = props.get(&quot;QRSearch_UserId&quot;);
	vars.put(&quot;QRSearch_UserId&quot;, qrSearch_UserId);
}

preParam();</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isExecuteSearchResourceByFloorplan" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="IfController.condition">${isExecuteSearchResourceByFloorplan}</stringProp>
        </IfController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Before Execute Search Resource By Floorplan" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}

function Prepare()
{
	var isExecuteGetCategories = false;

	if(getRandomInt(3) == 0)
	{
		isExecuteGetCategories = true;
	}
	
	vars.put(&quot;isExecuteGetCategories&quot;, isExecuteGetCategories);
}

Prepare();</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isExecuteGetCategories" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${isExecuteGetCategories}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetListCategories" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;IsDefaultCategory&quot;: false,&#xd;
	&quot;LoginEmail&quot;: &quot;${loginemail}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/GetListCategories</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">400</stringProp>
                <stringProp name="RandomTimer.range">500</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetAllFloorplan" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/GetAllFloorplan</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">800</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="HandleGetAllFloorplan" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}

function HandleGetAllFloorplan()
{
	var isExecuteGetDetailFloorplan = false;
	if(prev.getResponseDataAsString())
	{
		var listFloorplan = JSON.parse(prev.getResponseDataAsString());
		var countFloorplans = listFloorplan.length;
		if(countFloorplans &gt; 0)
		{						
			var floorplan = listFloorplan[getRandomInt(countFloorplans)];
			vars.put(&quot;Floorplan_Id&quot;,floorplan.Id);
			isExecuteGetDetailFloorplan = true;
		}
	}

	vars.put(&quot;isExecuteGetDetailFloorplan&quot;,isExecuteGetDetailFloorplan);
}

HandleGetAllFloorplan();</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isExecuteGetDetailFloorplan" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${isExecuteGetDetailFloorplan}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetFloorplanDetail" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;LoginEmail&quot;: &quot;${loginemail}&quot;,&#xd;
    &quot;ResourceTypeID&quot;: ${SearchResource_ResourceType},&#xd;
    &quot;FlooplanID&quot;: ${Floorplan_Id},&#xd;
    &quot;StartTime&quot;: {&#xd;
        &quot;Year&quot;: ${BookParam_StartTime_UTCYear},&#xd;
        &quot;Month&quot;: ${BookParam_StartTime_UTCMonth},&#xd;
        &quot;Day&quot;: ${BookParam_StartTime_UTCDate},&#xd;
        &quot;Hour&quot;: ${BookParam_StartTime_UTCHours},&#xd;
        &quot;Minute&quot;: ${BookParam_StartTime_UTCMinutes},&#xd;
        &quot;Second&quot;: ${BookParam_StartTime_UTCSeconds}&#xd;
    },&#xd;
    &quot;EndTime&quot;: {&#xd;
        &quot;Year&quot;: ${BookParam_EndTime_UTCYear},&#xd;
        &quot;Month&quot;: ${BookParam_EndTime_UTCMonth},&#xd;
        &quot;Day&quot;: ${BookParam_EndTime_UTCDate},&#xd;
        &quot;Hour&quot;: ${BookParam_EndTime_UTCHours},&#xd;
        &quot;Minute&quot;: ${BookParam_EndTime_UTCMinutes},&#xd;
        &quot;Second&quot;: ${BookParam_EndTime_UTCSeconds}&#xd;
    },&#xd;
    &quot;IsAllDay&quot;: false,&#xd;
    &quot;Is365&quot;: ${Is365}&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/GetFloorplanDetail</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">1000</stringProp>
                <stringProp name="RandomTimer.range">1000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="HandleGetFloorplanDetail" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}

function HandleResponse()
{
	var isExecuteCheckBookAbleResource = false;
	var isExecuteSearchResourceByResourceId = false;
	if(prev.getResponseDataAsString())
	{
		var listResourceOnFloorlan = JSON.parse(prev.getResponseDataAsString());
		var countResources = listResourceOnFloorlan.length;
		if(countResources &gt; 0)
		{						
			var resourceBook = listResourceOnFloorlan[getRandomInt(countResources)];
			isExecuteCheckBookAbleResource = true;
			isExecuteSearchResourceByResourceId = true;
			
			vars.put(&quot;CheckBookableResource_Email&quot;, resourceBook.Email);
			vars.put(&quot;CheckBookableResource_ResourceTypeId&quot;, resourceBook.ResourceTypeID);
			vars.put(&quot;CheckBookableResource_ResourceId&quot;, resourceBook.Id);
			
			vars.put(&quot;CreateAppointmentParam_Email&quot;, resourceBook.Email);
			vars.put(&quot;CreateAppointmentParam_ResourceTypeId&quot;, resourceBook.ResourceTypeID);
			vars.put(&quot;CreateAppointmentParam_ResourceId&quot;, resourceBook.Id);
			vars.put(&quot;CreateAppointmentParam_UserId&quot;, resourceBook.UserID);

			props.put(&quot;QRSearch_Email&quot;, resourceBook.Email);
			props.put(&quot;QRSearch_ResourceTypeId&quot;, resourceBook.ResourceTypeID);
			props.put(&quot;QRSearch_ResourceId&quot;, resourceBook.Id);
			props.put(&quot;QRSearch_UserId&quot;, resourceBook.UserID);
		}
	}
	
	vars.put(&quot;isExecuteCheckBookAbleResource&quot;, isExecuteCheckBookAbleResource);
	vars.put(&quot;isExecuteSearchResourceByResourceId&quot;, isExecuteSearchResourceByResourceId);
}

HandleResponse();


</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isExecuteSearchResourceByResourceId" enabled="true">
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
              <stringProp name="IfController.condition">${isExecuteSearchResourceByResourceId}</stringProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchResourceByResourceId" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;LoginEmail&quot;: &quot;${loginemail}&quot;,&#xd;
	&quot;Id&quot;: &quot;${CreateAppointmentParam_UserId}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/SearchResourceByResourceId</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">400</stringProp>
                  <stringProp name="RandomTimer.range">400</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetEndTimeAvailableResource" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;StartTime&quot;: {&#xd;
        &quot;Year&quot;: ${BookParam_StartTime_UTCYear},&#xd;
        &quot;Month&quot;: ${BookParam_StartTime_UTCMonth},&#xd;
        &quot;Day&quot;: ${BookParam_StartTime_UTCDate},&#xd;
        &quot;Hour&quot;: ${BookParam_StartTime_UTCHours},&#xd;
        &quot;Minute&quot;: ${BookParam_StartTime_UTCMinutes},&#xd;
        &quot;Second&quot;: ${BookParam_StartTime_UTCSeconds}&#xd;
    },&#xd;
    &quot;EndTime&quot;: {&#xd;
        &quot;Year&quot;: ${BookParam_EndTime_UTCYear},&#xd;
        &quot;Month&quot;: ${BookParam_EndTime_UTCMonth},&#xd;
        &quot;Day&quot;: ${BookParam_EndTime_UTCDate},&#xd;
        &quot;Hour&quot;: ${BookParam_EndTime_UTCHours},&#xd;
        &quot;Minute&quot;: ${BookParam_EndTime_UTCMinutes},&#xd;
        &quot;Second&quot;: ${BookParam_EndTime_UTCSeconds}&#xd;
    },&#xd;
	&quot;ResourceId&quot;: &quot;${CreateAppointmentParam_UserId}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/GetEndTimeAvailableResource</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">200</stringProp>
                  <stringProp name="RandomTimer.range">200</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isExecuteCheckBookAbleResource" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="IfController.condition">${isExecuteCheckBookAbleResource}</stringProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CheckBookAbleResource" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;ResourceId&quot;: ${CheckBookableResource_ResourceId},&#xd;
    &quot;StartTime&quot;: {&#xd;
        &quot;Year&quot;: ${BookParam_StartTime_UTCYear},&#xd;
        &quot;Month&quot;: ${BookParam_StartTime_UTCMonth},&#xd;
        &quot;Day&quot;: ${BookParam_StartTime_UTCDate},&#xd;
        &quot;Hour&quot;: ${BookParam_StartTime_UTCHours},&#xd;
        &quot;Minute&quot;: ${BookParam_StartTime_UTCMinutes},&#xd;
        &quot;Second&quot;: ${BookParam_StartTime_UTCSeconds}&#xd;
    },&#xd;
    &quot;EndTime&quot;: {&#xd;
        &quot;Year&quot;: ${BookParam_EndTime_UTCYear},&#xd;
        &quot;Month&quot;: ${BookParam_EndTime_UTCMonth},&#xd;
        &quot;Day&quot;: ${BookParam_EndTime_UTCDate},&#xd;
        &quot;Hour&quot;: ${BookParam_EndTime_UTCHours},&#xd;
        &quot;Minute&quot;: ${BookParam_EndTime_UTCMinutes},&#xd;
        &quot;Second&quot;: ${BookParam_EndTime_UTCSeconds}&#xd;
    },&#xd;
    &quot;OrganizerEmail&quot;: &quot;${loginemail}&quot;,&#xd;
    &quot;IsRecurringApp&quot;: false,&#xd;
    &quot;RecurrenceTypeOfRepeat&quot;: -1,&#xd;
    &quot;RecurrenceValueEvery&quot;: -1,&#xd;
    &quot;RecurrenceValueDay&quot;: -1,&#xd;
    &quot;RecurrenceValueMonth&quot;: -1,&#xd;
    &quot;RecurrenceValueIndexDayOfWeek&quot;: -1,&#xd;
    &quot;RecurrenceValueUntil&quot;: -1,&#xd;
    &quot;RecurrenceListDayOfWeek&quot;: [],&#xd;
    &quot;RecurrenceOccurrenceCount&quot;: -1,&#xd;
    &quot;RecurrenceSpecificDate&quot;: null,&#xd;
    &quot;RecurrenceStartDate&quot;: null,&#xd;
    &quot;RecurrenceEndDate&quot;: null,&#xd;
    &quot;EventId&quot;: &quot;&quot;,&#xd;
    &quot;LanguageCode&quot;: &quot;en-US&quot;,&#xd;
    &quot;IsAllDay&quot;: false&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/CheckBookableResource</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="HandleCheckBookAbleResource" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}

function HandleCheckBookAbleResource()
{
	var isExecuteCreateAppointment = false;
	if(prev.getResponseDataAsString())
	{
		var checkBookAbleResource = JSON.parse(prev.getResponseDataAsString());
		if(checkBookAbleResource &amp;&amp; checkBookAbleResource.IsAvailable &amp;&amp; getRandomInt(3) == 1)
		{						
			isExecuteCreateAppointment = true;
		}
	}
	
	vars.put(&quot;isExecuteCreateAppointment&quot;, isExecuteCreateAppointment);
}

HandleCheckBookAbleResource();</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">200</stringProp>
              <stringProp name="RandomTimer.range">300</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isExecuteCreateAppointment" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="IfController.condition">${isExecuteCreateAppointment}</stringProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetFloorplanByAppointment" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;LoginEmail&quot;: &quot;${loginemail}&quot;,&#xd;
    &quot;UserID&quot;: &quot;${CreateAppointmentParam_UserId}&quot;,&#xd;
    &quot;StartTime&quot;: {&#xd;
        &quot;Year&quot;: ${BookParam_StartTime_UTCYear},&#xd;
        &quot;Month&quot;: ${BookParam_StartTime_UTCMonth},&#xd;
        &quot;Day&quot;: ${BookParam_StartTime_UTCDate},&#xd;
        &quot;Hour&quot;: ${BookParam_StartTime_UTCHours},&#xd;
        &quot;Minute&quot;: ${BookParam_StartTime_UTCMinutes},&#xd;
        &quot;Second&quot;: ${BookParam_StartTime_UTCSeconds}&#xd;
    },&#xd;
    &quot;EndTime&quot;: {&#xd;
        &quot;Year&quot;: ${BookParam_EndTime_UTCYear},&#xd;
        &quot;Month&quot;: ${BookParam_EndTime_UTCMonth},&#xd;
        &quot;Day&quot;: ${BookParam_EndTime_UTCDate},&#xd;
        &quot;Hour&quot;: ${BookParam_EndTime_UTCHours},&#xd;
        &quot;Minute&quot;: ${BookParam_EndTime_UTCMinutes},&#xd;
        &quot;Second&quot;: ${BookParam_EndTime_UTCSeconds}&#xd;
    },&#xd;
    &quot;IsAllDay&quot;: false&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/GetFloorplanByAppointment</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">300</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchAttendee" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;UserID&quot;: &quot;${UserID}&quot;,&#xd;
    &quot;IsO365&quot;: ${Is365},&#xd;
    &quot;Name&quot;: &quot;${SearchAttendees_Text}&quot;,&#xd;
    &quot;TokenDelegatedPermission&quot;: &quot;${TokenDelegatedPermission}&quot;,&#xd;
    &quot;LoginEmail&quot;: &quot;${loginemail}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/SearchAttendees</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">500</stringProp>
              <stringProp name="RandomTimer.range">600</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="HandleSearchAttendee" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}

function HandleSearchAttendee()
{
	var attendeeJSMin = &apos;[]&apos;;
	if(prev.getResponseDataAsString())
	{
		var listAttendee = JSON.parse(prev.getResponseDataAsString());
		if(listAttendee &amp;&amp; listAttendee.length &gt; 0)
		{						
			isAddAttendee = true;
			var attendee = listAttendee[getRandomInt(listAttendee.length)];
			var isRequired = getRandomInt(2) == 1 ? false : true;
			
			attendeeJSMin = getRandomInt(1) == 0 ? &apos;[{&quot;UserID&quot;:&quot;&apos; + attendee.UserID + &apos;&quot;,&quot;AccountName&quot;:&quot;&apos; + attendee.AccountName + &apos;&quot;,&quot;DisplayName&quot;:&quot;&apos; + attendee.DisplayName + &apos;&quot;,&quot;Email&quot;:&quot;&apos; + attendee.Email + &apos;&quot;,&quot;IsRequired&quot;:&apos; + isRequired + &apos;,&quot;UrlAvatar&quot;:&quot;&apos; + attendee.UrlAvatar + &apos;&quot;,&quot;Department&quot;:&quot;&apos; + attendee.Department + &apos;&quot;,&quot;Office&quot;:&quot;&apos; + attendee.Office + &apos;&quot;,&quot;Company&quot;:&quot;&apos; + attendee.Company + &apos;&quot;,&quot;Phone&quot;:&quot;&apos; + attendee.Phone + &apos;&quot;,&quot;MobilePhone&quot;:&quot;&apos; + attendee.MobilePhone + &apos;&quot;,&quot;JobTitle&quot;:&quot;&apos; + attendee.JobTitle + &apos;&quot;,&quot;ListAppointments&quot;:&apos; + &apos;[]&apos; + &apos;}]&apos; : &apos;[]&apos;;
		}
	}

	vars.put(&quot;ListAttendee&quot;, attendeeJSMin);
}

HandleSearchAttendee();</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateAppointment" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;ListAttendees&quot;: ${ListAttendee},&#xd;
    &quot;DeviceStartTime&quot;: {&#xd;
        &quot;Year&quot;: ${BookParam_StartTime_Year},&#xd;
        &quot;Month&quot;: ${BookParam_StartTime_Month},&#xd;
        &quot;Day&quot;: ${BookParam_StartTime_Date},&#xd;
        &quot;Hour&quot;: ${BookParam_StartTime_Hours},&#xd;
        &quot;Minute&quot;: ${BookParam_StartTime_Minutes},&#xd;
        &quot;Second&quot;: ${BookParam_StartTime_Seconds}&#xd;
    },&#xd;
    &quot;DeviceEndTime&quot;: {&#xd;
        &quot;Year&quot;: ${BookParam_EndTime_Year},&#xd;
        &quot;Month&quot;: ${BookParam_EndTime_Month},&#xd;
	   &quot;Day&quot;: ${BookParam_EndTime_Date},&#xd;
        &quot;Hour&quot;: ${BookParam_EndTime_Hours},&#xd;
        &quot;Minute&quot;: ${BookParam_EndTime_Minutes},&#xd;
        &quot;Second&quot;: ${BookParam_EndTime_Seconds}&#xd;
    },&#xd;
    &quot;LoginEmail&quot;: &quot;${AccountBook}&quot;,&#xd;
    &quot;Email&quot;: &quot;${CreateAppointmentParam_Email}&quot;,&#xd;
    &quot;StartTime&quot;: {&#xd;
        &quot;Year&quot;: ${BookParam_StartTime_UTCYear},&#xd;
        &quot;Month&quot;: ${BookParam_StartTime_UTCMonth},&#xd;
        &quot;Day&quot;: ${BookParam_StartTime_UTCDate},&#xd;
        &quot;Hour&quot;: ${BookParam_StartTime_UTCHours},&#xd;
        &quot;Minute&quot;: ${BookParam_StartTime_UTCMinutes},&#xd;
        &quot;Second&quot;: ${BookParam_StartTime_UTCSeconds}&#xd;
    },&#xd;
    &quot;EndTime&quot;: {&#xd;
        &quot;Year&quot;: ${BookParam_EndTime_UTCYear},&#xd;
        &quot;Month&quot;: ${BookParam_EndTime_UTCMonth},&#xd;
        &quot;Day&quot;: ${BookParam_EndTime_UTCDate},&#xd;
        &quot;Hour&quot;: ${BookParam_EndTime_UTCHours},&#xd;
        &quot;Minute&quot;: ${BookParam_EndTime_UTCMinutes},&#xd;
        &quot;Second&quot;: ${BookParam_EndTime_UTCSeconds}&#xd;
    },&#xd;
    &quot;IsAllDay&quot;: false,&#xd;
    &quot;IsOwnCalendar&quot;: true,&#xd;
    &quot;OrganizerEmail&quot;: &quot;${AccountBook}&quot;,&#xd;
    &quot;ResourceTypeId&quot;: ${CreateAppointmentParam_ResourceTypeId},&#xd;
    &quot;Subject&quot;: &quot;test auto&quot;,&#xd;
    &quot;BusyStatusId&quot;: 2,&#xd;
    &quot;RecurrenceTypeOfRepeat&quot;: -1,&#xd;
    &quot;RecurrenceValueEvery&quot;: -1,&#xd;
    &quot;RecurrenceValueDay&quot;: -1,&#xd;
    &quot;RecurrenceValueMonth&quot;: -1,&#xd;
    &quot;RecurrenceValueIndexDayOfWeek&quot;: -1,&#xd;
    &quot;RecurrenceValueUntil&quot;: -1,&#xd;
    &quot;RecurrenceListDayOfWeek&quot;: [],&#xd;
    &quot;RecurrenceSpecificDate&quot;: null,&#xd;
    &quot;TokenDelegatedPermission&quot;: &quot;${TokenDelegatedPermission}&quot;,&#xd;
    &quot;ResourceId&quot;: ${CreateAppointmentParam_ResourceId},&#xd;
    &quot;LanguageCode&quot;: &quot;enUS&quot;,&#xd;
    &quot;IsFromQRCode&quot;: false,&#xd;
    &quot;Timezone&quot;: &quot;Asia/Bangkok&quot;,&#xd;
    &quot;TraceId&quot;: null&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/CreateAppointment</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PrepareTimeBook" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}

function UpdateTimeSpanToNextBookTime()
{
	var timeSpanToNextBookTime = parseInt(props.get(&quot;TimeSpanToNextBookTime&quot;)) + parseInt(vars.get(&quot;TimeSpan&quot;));
	props.put(&quot;TimeSpanToNextBookTime&quot;, timeSpanToNextBookTime);
}

function PrepareUserAccount()
{
	var loginEmailArray = vars.get(&quot;LoginEmailArray&quot;).split(&apos;,&apos;);
	vars.put(&apos;AccountBook&apos;, loginEmailArray[getRandomInt(loginEmailArray.length)]);
}

UpdateTimeSpanToNextBookTime();
PrepareUserAccount();</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="TimeLoadingOnWorkspace" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">1000</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="TimeDelayExecuteThread" enabled="true">
          <stringProp name="ConstantTimer.delay">5000</stringProp>
          <stringProp name="RandomTimer.range">500</stringProp>
        </UniformRandomTimer>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="List,Detail,Master,Update - WS" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">60</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="_timeZoneOffset" elementType="Cookie" testname="_timeZoneOffset">
              <stringProp name="Cookie.value">420</stringProp>
              <stringProp name="Cookie.domain">${hostname}.</stringProp>
              <stringProp name="Cookie.path"></stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="_timeZone" elementType="Cookie" testname="_timeZone">
              <stringProp name="Cookie.value">Asia/Bangkok</stringProp>
              <stringProp name="Cookie.domain">${hostname}.</stringProp>
              <stringProp name="Cookie.path"></stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="ASP.NET_SessionId" elementType="Cookie" testname="ASP.NET_SessionId">
              <stringProp name="Cookie.value">ae5iclplq3dn2mfpdmfn45vd</stringProp>
              <stringProp name="Cookie.domain">${hostname}.</stringProp>
              <stringProp name="Cookie.path"></stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="DSS_COOKIES" elementType="Cookie" testname="DSS_COOKIES">
              <stringProp name="Cookie.value">B56A60CDBAF4C78A6F94DE96365749B5E623D90A3F7F6814C638C7CEBD1CBE54B95D7CE0FA1FEA3A3B803AB358A04C77D1D447C4ACBAFF66885FA95E9D13DEB4171F05AF0C2401B5D5902A17EEA17E18C83344E5AB4C29402B77B6CF463C816FCDF694B74BAE1C27F375B3B734EF6378F503FF0BFF6541F383A4E3FDE8677D1FF1D3A240BEAE22EDB23ADF358D01B65B4C52BF100C5EE8DCE01CE80150B801051AFD9EC987AF192543F70A8F86B9E9EA137E70F339B5DAFA3F5372D2B9E1D1697B6050578D1CD1EF5DC1A0336D059A1B34A1E7D5E2A68E470DEAEC060F869742E8E5206852F515DECF39F27EEEE472F462566BC261C68C11774D26338600A1E6</stringProp>
              <stringProp name="Cookie.domain">${hostname}.</stringProp>
              <stringProp name="Cookie.path"></stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <com.blazemeter.jmeter.http.ParallelHTTPSampler guiclass="com.blazemeter.jmeter.http.ParallelHTTPSamplerGui" testclass="com.blazemeter.jmeter.http.ParallelHTTPSampler" testname="jp@gc - Parallel HTTP Requests" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <boolProp name="HTTPSampler.image_parser">true</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
          <collectionProp name="urls"/>
        </com.blazemeter.jmeter.http.ParallelHTTPSampler>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreParam" enabled="true">
          <stringProp name="scriptLanguage">javascript</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}

function PreParam()
{
	var isExecuteGetAllFloorplan = false;
	var isExecuteListAppointmentPagging = false;
	var valswitch = 0;
	switch(valswitch)
	{
		case 0:
			isExecuteGetAllFloorplan = true;
			break;
		case 1:
			isExecuteListAppointmentPagging = true;
			break;
		default:
			break;
	}

	vars.put(&quot;isExecuteGetAllFloorplan&quot;,isExecuteGetAllFloorplan);
	vars.put(&quot;isExecuteListAppointmentPagging&quot;,isExecuteListAppointmentPagging);
}

PreParam();
</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isExecuteGetAllFloorplan" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="IfController.condition">${isExecuteGetAllFloorplan}</stringProp>
        </IfController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreParam" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}

function Prepare()
{
	var isExecuteGetCategories = false;

	if(getRandomInt(3) == 0)
	{
		isExecuteGetCategories = true;
	}
	
	vars.put(&quot;isExecuteGetCategories&quot;, isExecuteGetCategories);
}

Prepare();</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isExecuteGetCategories" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${isExecuteGetCategories}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetListCategories" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;IsDefaultCategory&quot;: false,&#xd;
	&quot;LoginEmail&quot;: &quot;${loginemail}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/GetListCategories</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">400</stringProp>
                <stringProp name="RandomTimer.range">500</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetAllFloorplan" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/GetAllFloorplan</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="HandleGetAllFloorplan" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}

function HandleGetAllFloorplan()
{
	var isExecuteGetFloorplanDetailWithOutDate = false;
	var isExecuteSearchResourceWithOutDate = false;
	if(prev.getResponseDataAsString())
	{
		var listFloorplan = JSON.parse(prev.getResponseDataAsString());
		var countFloorplans = listFloorplan.length;
		if(countFloorplans &gt; 0)
		{						
			var floorplan = listFloorplan[getRandomInt(countFloorplans)];
			var valSwitch = getRandomInt(2);
			vars.put(&quot;Floorplan_Id&quot;,floorplan.Id);
			switch(valSwitch){
				case 0:
					isExecuteGetFloorplanDetailWithOutDate = true;
					break;
				case 1: 
					isExecuteSearchResourceWithOutDate = true;
					break;
				default:
					break;
			}
		}
	}

	vars.put(&quot;isExecuteGetFloorplanDetailWithOutDate&quot;,isExecuteGetFloorplanDetailWithOutDate);
	vars.put(&quot;isExecuteSearchResourceWithOutDate&quot;, isExecuteSearchResourceWithOutDate);
}

HandleGetAllFloorplan();</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">9000</stringProp>
              <stringProp name="RandomTimer.range">200</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isExecuteGetFloorplanDetailWithOutDate" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${isExecuteGetFloorplanDetailWithOutDate}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetFloorplanDetailWithOutDate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;LoginEmail&quot;: &quot;${loginemail}&quot;,&#xd;
	&quot;ResourceTypeID&quot;: 0,&#xd;
	&quot;FlooplanID&quot;: ${Floorplan_Id},&#xd;
	&quot;StartTime&quot;: null,&#xd;
	&quot;EndTime&quot;: null, &#xd;
	&quot;IsAllDay&quot;: false,&#xd;
	&quot;Is365&quot;: ${Is365}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/GetFloorplanDetailWithOutDate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">400</stringProp>
                <stringProp name="RandomTimer.range">400</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="HandleGetFloorplanDetailWithOutDate" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}

function HandleGetFloorplanDetailWithOutDate()
{
	var isExecuteGetListAppointmentPagging_ResourceAgenda = false;
	if(prev.getResponseDataAsString())
	{
		var listResource = JSON.parse(prev.getResponseDataAsString());
		var countResources = listResource.length;
		if(countResources &gt; 0)
		{						
			var resource = listResource[getRandomInt(countResources)];
			vars.put(&quot;ListAppointmentPaggingResourceAgenda_ResourceUserId&quot;,resource.UserID);
			isExecuteGetListAppointmentPagging_ResourceAgenda = true;
		}
	}

	vars.put(&quot;isExecuteGetListAppointmentPagging_ResourceAgenda&quot;, isExecuteGetListAppointmentPagging_ResourceAgenda);
}

HandleGetFloorplanDetailWithOutDate();</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isExecuteSearchResourceWithOutDate" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${isExecuteSearchResourceWithOutDate}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchResourceWithOutDate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;LoginEmail&quot;: &quot;${loginemail}&quot;,&#xd;
    &quot;UserName&quot;: &quot;${loginemail}&quot;,&#xd;
    &quot;Name&quot;: &quot;${SearchResource_Text}&quot;,&#xd;
    &quot;ResourceType&quot;: 0,&#xd;
    &quot;Is365&quot;: ${Is365},&#xd;
    &quot;StartTime&quot;: null,&#xd;
    &quot;EndTime&quot;: null,&#xd;
    &quot;IsAllDay&quot;: false,&#xd;
    &quot;FlooplanId&quot;: ${Floorplan_Id},&#xd;
    &quot;ListCategory&quot;: null,&#xd;
    &quot;ConditionFilterCategory&quot;: 1,&#xd;
    &quot;ConditionFilterCapacity&quot;: 1,&#xd;
    &quot;CapacityValue&quot;: 0&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/SearchResourceWithOutDate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">400</stringProp>
                <stringProp name="RandomTimer.range">400</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="HandleSearchResourceWithOutDate" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}

function SearchResourceWithOutDate()
{
	var isExecuteGetListAppointmentPagging_ResourceAgenda = false;
	if(prev.getResponseDataAsString())
	{
		var listResource = JSON.parse(prev.getResponseDataAsString());
		var countResources = listResource.length;
		if(countResources &gt; 0)
		{						
			var resource = listResource[getRandomInt(countResources)];
			vars.put(&quot;ListAppointmentPaggingResourceAgenda_ResourceUserId&quot;,resource.UserID);
			isExecuteGetListAppointmentPagging_ResourceAgenda = true;
		}
	}

	vars.put(&quot;isExecuteGetListAppointmentPagging_ResourceAgenda&quot;, isExecuteGetListAppointmentPagging_ResourceAgenda);
}

SearchResourceWithOutDate();</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isExecuteGetListAppointmentPagging_ResourceAgenda" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${isExecuteGetListAppointmentPagging_ResourceAgenda}</stringProp>
          </IfController>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreParam To Get List Appointment Resource Agenda" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}


function PrepareUserAccount()
{
	var loginEmailArray = vars.get(&quot;LoginEmailArray&quot;).split(&apos;,&apos;);
	var loginUserIDArray = vars.get(&quot;LoginUserIDArray&quot;).split(&apos;,&apos;);
	var index = getRandomInt(loginEmailArray.length);
	vars.put(&quot;ListAppointmentPaggingByResourceAgenda_UserNameSearchList&quot;, loginEmailArray[index]);
	vars.put(&quot;ListAppointmentPaggingByResourceAgenda_UserIDSearchList&quot;, loginUserIDArray[index]);
}

PrepareUserAccount();</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ListAllResourceByFloorplan" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;LoginEmail&quot;: &quot;${ListAppointmentPaggingByResourceAgenda_UserNameSearchList}&quot;,&#xd;
	&quot;CurrentPage&quot;: 1,&#xd;
	&quot;UserID&quot;: &quot;${ListAppointmentPaggingByResourceAgenda_UserIDSearchList}&quot;,&#xd;
	&quot;CurrentDate&quot;: {&#xd;
	    &quot;Year&quot;: ${utcYearNow},&#xd;
	    &quot;Month&quot;: ${utcMonthNow},&#xd;
	    &quot;Day&quot;: ${utcDateNow},&#xd;
	    &quot;Hour&quot;: ${utcHourNow},&#xd;
	    &quot;Minute&quot;: ${utcMinutesNow}&#xd;
	  },&#xd;
	&quot;ResourceID&quot;: &quot;${ListAppointmentPaggingResourceAgenda_ResourceUserId}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/ListAllResourceByFloorplan</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">400</stringProp>
                <stringProp name="RandomTimer.range">400</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ListAppointmentPaggingByResource" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;LoginEmail&quot;: &quot;${ListAppointmentPaggingByResourceAgenda_UserNameSearchList}&quot;,&#xd;
	&quot;CurrentPage&quot;: 1,&#xd;
	&quot;UserID&quot;: &quot;${ListAppointmentPaggingByResourceAgenda_UserIDSearchList}&quot;,&#xd;
	&quot;CurrentDate&quot;: {&#xd;
	    &quot;Year&quot;: ${utcYearNow},&#xd;
	    &quot;Month&quot;: ${utcMonthNow},&#xd;
	    &quot;Day&quot;: ${utcDateNow},&#xd;
	    &quot;Hour&quot;: ${utcHourNow},&#xd;
	    &quot;Minute&quot;: ${utcMinutesNow}&#xd;
	  },&#xd;
	&quot;ResourceID&quot;: &quot;${ListAppointmentPaggingResourceAgenda_ResourceUserId}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/ListAppointmentPaggingByResource</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">400</stringProp>
                <stringProp name="RandomTimer.range">400</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="HandleListAppointmentPaggingByResource" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}

function convertUTCDateToLocalDate(date) {
    var newDate = new Date(date.getTime() - date.getTimezoneOffset()*60*1000);
    return newDate;    
}

function convertLocalDateToUTCDate(date) {
    var newDate = new Date(date.getTime() + date.getTimezoneOffset()*60*1000);
    return newDate;    
}

function HandleResponse()
{
	var isExecuteGetAppointmentById = false;
	var isExecuteDeleteAppointment = false;
	var isExecuteSearchResourceByResourceId = false;
	var isExecuteListAppointmentResourceAgendaNextPage = false;
	
	if(prev.getResponseDataAsString())
	{
		var response = JSON.parse(prev.getResponseDataAsString());
		var countAppointment = parseInt(response[1]);
		var listAppointment = response[2];
		if(countAppointment &gt; 0)
		{
			var indexAppointment = getRandomInt(countAppointment);
			var appointmentDetail = listAppointment[indexAppointment];
			var rowPerpage = vars.get(&quot;rowsPerPage&quot;);
			var totalPage = Math.ceil(countAppointment / rowPerpage);

			if(totalPage &gt; 1)
			{
				isExecuteListAppointmentResourceAgendaNextPage = true;
				vars.put(&quot;ListAppointmentResourceAgendaNextPage_CurrentPage&quot;, getRandomInt(totalPage + 1));
			}
			
			if(appointmentDetail){
				var valSwitchAction = getRandomInt(10);

				appointmentDetail.StartTime = convertLocalDateToUTCDate(new Date(appointmentDetail.StartTime));
				appointmentDetail.EndTime = convertLocalDateToUTCDate(new Date(appointmentDetail.EndTime));
				
				var DeviceStartTime = convertUTCDateToLocalDate(appointmentDetail.StartTime);
				var DeviceEndTime = convertUTCDateToLocalDate(appointmentDetail.EndTime);
				
				vars.put(&quot;appointmentDetail_Dummy&quot;, appointmentDetail.IsDummy);
				vars.put(&quot;appointmentDetail_Subject&quot;, appointmentDetail.Subject);
				vars.put(&quot;appointmentDetail_Organizer&quot;, appointmentDetail.Organizer);
				vars.put(&quot;appointmentDetail_OrganizerId&quot;, appointmentDetail.OrganizerId);
				vars.put(&quot;appointmentDetail_EventID&quot;, appointmentDetail.EventID);
				vars.put(&quot;appointmentDetail_UserID&quot;, appointmentDetail.UserID);
				vars.put(&quot;appointmentDetail_OrganizerEmail&quot;, appointmentDetail.OrganizerEmail);
				vars.put(&quot;appointmentDetail_UID&quot;, appointmentDetail.Uid);
				vars.put(&quot;appointmentDetail_RecurrenceTypeOfRepeat&quot;, appointmentDetail.RecurrenceTypeOfRepeat);
				vars.put(&quot;appointmentDetail_ResourceId&quot;, appointmentDetail.ResourceModel.Id);
				vars.put(&quot;appointmentDetail_IsAllDayEvent&quot;, appointmentDetail.IsAllDayEvent);		
				vars.put(&quot;appointmentDetail_Booked&quot;, appointmentDetail.Booked);
				vars.put(&quot;appointmentDetail_ResourceEmail&quot;, appointmentDetail.ResourceModel.Email);
				
				vars.put(&quot;appointmentDetail_StartTime_Year&quot;, appointmentDetail.StartTime.getFullYear());
				vars.put(&quot;appointmentDetail_StartTime_Month&quot;, appointmentDetail.StartTime.getMonth() + 1);
				vars.put(&quot;appointmentDetail_StartTime_Day&quot;, appointmentDetail.StartTime.getDate());
				vars.put(&quot;appointmentDetail_StartTime_Hours&quot;, appointmentDetail.StartTime.getHours());
				vars.put(&quot;appointmentDetail_StartTime_Minutes&quot;, appointmentDetail.StartTime.getMinutes());
				vars.put(&quot;appointmentDetail_StartTime_Seconds&quot;, appointmentDetail.StartTime.getSeconds());
				
				vars.put(&quot;appointmentDetail_EndTime_Year&quot;, appointmentDetail.EndTime.getFullYear());
				vars.put(&quot;appointmentDetail_EndTime_Month&quot;, appointmentDetail.EndTime.getMonth() + 1);
				vars.put(&quot;appointmentDetail_EndTime_Day&quot;, appointmentDetail.EndTime.getDate());
				vars.put(&quot;appointmentDetail_EndTime_Hours&quot;, appointmentDetail.EndTime.getHours());
				vars.put(&quot;appointmentDetail_EndTime_Minutes&quot;, appointmentDetail.EndTime.getMinutes());
				vars.put(&quot;appointmentDetail_EndTime_Seconds&quot;, appointmentDetail.EndTime.getSeconds());
	
				vars.put(&quot;appointmentDetail_DeviceStartTime_Year&quot;, DeviceStartTime.getFullYear());
				vars.put(&quot;appointmentDetail_DeviceStartTime_Month&quot;, DeviceStartTime.getMonth() + 1);
				vars.put(&quot;appointmentDetail_DeviceStartTime_Day&quot;, DeviceStartTime.getDate());
				vars.put(&quot;appointmentDetail_DeviceStartTime_Hours&quot;, DeviceStartTime.getHours());
				vars.put(&quot;appointmentDetail_DeviceStartTime_Minutes&quot;, DeviceStartTime.getMinutes());
				vars.put(&quot;appointmentDetail_DeviceStartTime_Seconds&quot;, DeviceStartTime.getSeconds());
				
				vars.put(&quot;appointmentDetail_DeviceEndTime_Year&quot;, DeviceEndTime.getFullYear());
				vars.put(&quot;appointmentDetail_DeviceEndTime_Month&quot;, DeviceEndTime.getMonth() + 1);
				vars.put(&quot;appointmentDetail_DeviceEndTime_Day&quot;, DeviceEndTime.getDate());
				vars.put(&quot;appointmentDetail_DeviceEndTime_Hours&quot;, DeviceEndTime.getHours());
				vars.put(&quot;appointmentDetail_DeviceEndTime_Minutes&quot;, DeviceEndTime.getMinutes());
				vars.put(&quot;appointmentDetail_DeviceEndTime_Seconds&quot;, DeviceEndTime.getSeconds());
				
				if(valSwitchAction == 3 || valSwitchAction == 4 || valSwitchAction == 5)
				{	
					isExecuteGetAppointmentById = true;
				}
				else if((valSwitchAction == 1) &amp;&amp; appointmentDetail.Subject.contains(&quot;test auto&quot;))
				{
					isExecuteDeleteAppointment = true;
				}
				else if((valSwitchAction == 6 || valSwitchAction == 7 || valSwitchAction == 8) 
				&amp;&amp; !appointmentDetail.IsConfirmed 
				&amp;&amp; appointmentDetail.ResourceModel &amp;&amp; appointmentDetail.ResourceModel.IsEnableConfirm)
				{
					isExecuteSearchResourceByResourceId = true;
				}
			}
		}
	}
	
	vars.put(&quot;isExecuteGetAppointmentById&quot;, isExecuteGetAppointmentById);
	vars.put(&quot;isExecuteDeleteAppointment&quot;, isExecuteDeleteAppointment);
	vars.put(&quot;isExecuteSearchResourceByResourceId&quot;, isExecuteSearchResourceByResourceId);
	vars.put(&quot;isExecuteListAppointmentResourceAgendaNextPage&quot;, isExecuteListAppointmentResourceAgendaNextPage);
	
}

HandleResponse();


</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isExecuteListAppointmentResourceAgendaNextPage" enabled="true">
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
              <stringProp name="IfController.condition">${isExecuteListAppointmentResourceAgendaNextPage}</stringProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ListAppointmentPaggingByResource" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;LoginEmail&quot;: &quot;${ListAppointmentPaggingByResourceAgenda_UserNameSearchList}&quot;,&#xd;
	&quot;CurrentPage&quot;: ${ListAppointmentResourceAgendaNextPage_CurrentPage},&#xd;
	&quot;UserID&quot;: &quot;${ListAppointmentPaggingByResourceAgenda_UserIDSearchList}&quot;,&#xd;
	&quot;CurrentDate&quot;: {&#xd;
	    &quot;Year&quot;: ${utcYearNow},&#xd;
	    &quot;Month&quot;: ${utcMonthNow},&#xd;
	    &quot;Day&quot;: ${utcDateNow},&#xd;
	    &quot;Hour&quot;: ${utcHourNow},&#xd;
	    &quot;Minute&quot;: ${utcMinutesNow}&#xd;
	  },&#xd;
	&quot;ResourceID&quot;: &quot;${ListAppointmentPaggingResourceAgenda_ResourceUserId}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/ListAppointmentPaggingByResource</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">400</stringProp>
                  <stringProp name="RandomTimer.range">400</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="HandleListAppointmentPaggingByResource" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}

function convertUTCDateToLocalDate(date) {
    var newDate = new Date(date.getTime() - date.getTimezoneOffset()*60*1000);
    return newDate;    
}

function convertLocalDateToUTCDate(date) {
    var newDate = new Date(date.getTime() + date.getTimezoneOffset()*60*1000);
    return newDate;    
}

function HandleResponse()
{
	var isExecuteGetAppointmentById = false;
	var isExecuteDeleteAppointment = false;
	var isExecuteSearchResourceByResourceId = false;
	
	if(prev.getResponseDataAsString())
	{
		var response = JSON.parse(prev.getResponseDataAsString());
		var countAppointment = parseInt(response[1]);
		var listAppointment = response[2];
		if(countAppointment &gt; 0)
		{
			var indexAppointment = getRandomInt(countAppointment);
			var appointmentDetail = listAppointment[indexAppointment];
			
			if(appointmentDetail){
				var valSwitchAction = getRandomInt(10);

				appointmentDetail.StartTime = convertLocalDateToUTCDate(new Date(appointmentDetail.StartTime));
				appointmentDetail.EndTime = convertLocalDateToUTCDate(new Date(appointmentDetail.EndTime));
				
				var DeviceStartTime = convertUTCDateToLocalDate(appointmentDetail.StartTime);
				var DeviceEndTime = convertUTCDateToLocalDate(appointmentDetail.EndTime);
				
				vars.put(&quot;appointmentDetail_Dummy&quot;, appointmentDetail.IsDummy);
				vars.put(&quot;appointmentDetail_Subject&quot;, appointmentDetail.Subject);
				vars.put(&quot;appointmentDetail_Organizer&quot;, appointmentDetail.Organizer);
				vars.put(&quot;appointmentDetail_OrganizerId&quot;, appointmentDetail.OrganizerId);
				vars.put(&quot;appointmentDetail_EventID&quot;, appointmentDetail.EventID);
				vars.put(&quot;appointmentDetail_UserID&quot;, appointmentDetail.UserID);
				vars.put(&quot;appointmentDetail_OrganizerEmail&quot;, appointmentDetail.OrganizerEmail);
				vars.put(&quot;appointmentDetail_UID&quot;, appointmentDetail.Uid);
				vars.put(&quot;appointmentDetail_RecurrenceTypeOfRepeat&quot;, appointmentDetail.RecurrenceTypeOfRepeat);
				vars.put(&quot;appointmentDetail_ResourceId&quot;, appointmentDetail.ResourceModel.Id);
				vars.put(&quot;appointmentDetail_IsAllDayEvent&quot;, appointmentDetail.IsAllDayEvent);		
				vars.put(&quot;appointmentDetail_Booked&quot;, appointmentDetail.Booked);
				vars.put(&quot;appointmentDetail_ResourceEmail&quot;, appointmentDetail.ResourceModel.Email);
				
				vars.put(&quot;appointmentDetail_StartTime_Year&quot;, appointmentDetail.StartTime.getFullYear());
				vars.put(&quot;appointmentDetail_StartTime_Month&quot;, appointmentDetail.StartTime.getMonth() + 1);
				vars.put(&quot;appointmentDetail_StartTime_Day&quot;, appointmentDetail.StartTime.getDate());
				vars.put(&quot;appointmentDetail_StartTime_Hours&quot;, appointmentDetail.StartTime.getHours());
				vars.put(&quot;appointmentDetail_StartTime_Minutes&quot;, appointmentDetail.StartTime.getMinutes());
				vars.put(&quot;appointmentDetail_StartTime_Seconds&quot;, appointmentDetail.StartTime.getSeconds());
				
				vars.put(&quot;appointmentDetail_EndTime_Year&quot;, appointmentDetail.EndTime.getFullYear());
				vars.put(&quot;appointmentDetail_EndTime_Month&quot;, appointmentDetail.EndTime.getMonth() + 1);
				vars.put(&quot;appointmentDetail_EndTime_Day&quot;, appointmentDetail.EndTime.getDate());
				vars.put(&quot;appointmentDetail_EndTime_Hours&quot;, appointmentDetail.EndTime.getHours());
				vars.put(&quot;appointmentDetail_EndTime_Minutes&quot;, appointmentDetail.EndTime.getMinutes());
				vars.put(&quot;appointmentDetail_EndTime_Seconds&quot;, appointmentDetail.EndTime.getSeconds());
	
				vars.put(&quot;appointmentDetail_DeviceStartTime_Year&quot;, DeviceStartTime.getFullYear());
				vars.put(&quot;appointmentDetail_DeviceStartTime_Month&quot;, DeviceStartTime.getMonth() + 1);
				vars.put(&quot;appointmentDetail_DeviceStartTime_Day&quot;, DeviceStartTime.getDate());
				vars.put(&quot;appointmentDetail_DeviceStartTime_Hours&quot;, DeviceStartTime.getHours());
				vars.put(&quot;appointmentDetail_DeviceStartTime_Minutes&quot;, DeviceStartTime.getMinutes());
				vars.put(&quot;appointmentDetail_DeviceStartTime_Seconds&quot;, DeviceStartTime.getSeconds());
				
				vars.put(&quot;appointmentDetail_DeviceEndTime_Year&quot;, DeviceEndTime.getFullYear());
				vars.put(&quot;appointmentDetail_DeviceEndTime_Month&quot;, DeviceEndTime.getMonth() + 1);
				vars.put(&quot;appointmentDetail_DeviceEndTime_Day&quot;, DeviceEndTime.getDate());
				vars.put(&quot;appointmentDetail_DeviceEndTime_Hours&quot;, DeviceEndTime.getHours());
				vars.put(&quot;appointmentDetail_DeviceEndTime_Minutes&quot;, DeviceEndTime.getMinutes());
				vars.put(&quot;appointmentDetail_DeviceEndTime_Seconds&quot;, DeviceEndTime.getSeconds());
				
				if(valSwitchAction == 3 || valSwitchAction == 4 || valSwitchAction == 5)
				{	
					isExecuteGetAppointmentById = true;
				}
				else if((valSwitchAction == 1) &amp;&amp; appointmentDetail.Subject.contains(&quot;test auto&quot;))
				{
					isExecuteDeleteAppointment = true;
				}
				else if((valSwitchAction == 6 || valSwitchAction == 7 || valSwitchAction == 8) 
				&amp;&amp; !appointmentDetail.IsConfirmed 
				&amp;&amp; appointmentDetail.ResourceModel &amp;&amp; appointmentDetail.ResourceModel.IsEnableConfirm)
				{
					isExecuteSearchResourceByResourceId = true;
				}
			}
		}
	}
	
	vars.put(&quot;isExecuteGetAppointmentById&quot;, isExecuteGetAppointmentById);
	vars.put(&quot;isExecuteDeleteAppointment&quot;, isExecuteDeleteAppointment);
	vars.put(&quot;isExecuteSearchResourceByResourceId&quot;, isExecuteSearchResourceByResourceId);
}

HandleResponse();


</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isExecuteListAppointmentPagging" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="IfController.condition">${isExecuteListAppointmentPagging}</stringProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ListAppointmentPagging" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;CurrentDate&quot;: {&#xd;
    &quot;Year&quot;: ${utcYearNow},&#xd;
    &quot;Month&quot;: ${utcMonthNow},&#xd;
    &quot;Day&quot;: ${utcDateNow},&#xd;
    &quot;Hour&quot;: ${utcHourNow},&#xd;
    &quot;Minute&quot;: ${utcMinutesNow}&#xd;
  },&#xd;
  &quot;CurrentPage&quot;: 1,&#xd;
  &quot;UserID&quot;: &quot;${UserIDSearchList}&quot;,&#xd;
  &quot;LoginEmail&quot;: &quot;${UserNameSearchList}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/listappointmentpagging</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Time Delay" enabled="true">
              <stringProp name="ConstantTimer.delay">9000</stringProp>
              <stringProp name="RandomTimer.range">200</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PrepareParamListAppointmentPagging" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}


function PrepareUserAccount()
{
	var loginEmailArray = vars.get(&quot;LoginEmailArray&quot;).split(&apos;,&apos;);
	var loginUserIDArray = vars.get(&quot;LoginUserIDArray&quot;).split(&apos;,&apos;);
	var index = getRandomInt(loginEmailArray.length);
	vars.put(&quot;UserNameSearchList&quot;, loginEmailArray[index]);
	vars.put(&quot;UserIDSearchList&quot;, loginUserIDArray[index]);
}

PrepareUserAccount();</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="HandleListAppointmentPagging" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}

function convertUTCDateToLocalDate(date) {
    var newDate = new Date(date.getTime() - date.getTimezoneOffset()*60*1000);
    return newDate;    
}

function convertLocalDateToUTCDate(date) {
    var newDate = new Date(date.getTime() + date.getTimezoneOffset()*60*1000);
    return newDate;    
}

function HandleResponse()
{
	var isExecuteGetAppointmentById = false;
	var isExecuteDeleteAppointment = false;
	var isExecuteSearchResourceByResourceId = false;
	var isExecuteListAppointmentNextPage = false;
	
	if(prev.getResponseDataAsString())
	{
		var response = JSON.parse(prev.getResponseDataAsString());
		var countAppointment = parseInt(response[1]);
		var listAppointment = response[2];
		if(countAppointment &gt; 0)
		{
			var indexAppointment = getRandomInt(countAppointment);
			var appointmentDetail = listAppointment[indexAppointment];
			var rowPerpage = vars.get(&quot;rowsPerPage&quot;);
			var totalPage = Math.ceil(countAppointment / rowPerpage);

			if(totalPage &gt; 1)
			{
				isExecuteListAppointmentNextPage = true;
				vars.put(&quot;ListAppointmentNextPage_CurrentPage&quot;, getRandomInt(totalPage + 1));
			}
			
			if(appointmentDetail){
				var valSwitchAction = getRandomInt(10);

				appointmentDetail.StartTime = convertLocalDateToUTCDate(new Date(appointmentDetail.StartTime));
				appointmentDetail.EndTime = convertLocalDateToUTCDate(new Date(appointmentDetail.EndTime));
				
				var DeviceStartTime = convertUTCDateToLocalDate(appointmentDetail.StartTime);
				var DeviceEndTime = convertUTCDateToLocalDate(appointmentDetail.EndTime);
				
				vars.put(&quot;appointmentDetail_Dummy&quot;, appointmentDetail.IsDummy);
				vars.put(&quot;appointmentDetail_Subject&quot;, appointmentDetail.Subject);
				vars.put(&quot;appointmentDetail_Organizer&quot;, appointmentDetail.Organizer);
				vars.put(&quot;appointmentDetail_OrganizerId&quot;, appointmentDetail.OrganizerId);
				vars.put(&quot;appointmentDetail_EventID&quot;, appointmentDetail.EventID);
				vars.put(&quot;appointmentDetail_UserID&quot;, appointmentDetail.UserID);
				vars.put(&quot;appointmentDetail_OrganizerEmail&quot;, appointmentDetail.OrganizerEmail);
				vars.put(&quot;appointmentDetail_UID&quot;, appointmentDetail.Uid);
				vars.put(&quot;appointmentDetail_RecurrenceTypeOfRepeat&quot;, appointmentDetail.RecurrenceTypeOfRepeat);
				vars.put(&quot;appointmentDetail_ResourceId&quot;, appointmentDetail.ResourceModel.Id);
				vars.put(&quot;appointmentDetail_IsAllDayEvent&quot;, appointmentDetail.IsAllDayEvent);		
				vars.put(&quot;appointmentDetail_Booked&quot;, appointmentDetail.Booked);
				vars.put(&quot;appointmentDetail_ResourceEmail&quot;, appointmentDetail.ResourceModel.Email);
				
				vars.put(&quot;appointmentDetail_StartTime_Year&quot;, appointmentDetail.StartTime.getFullYear());
				vars.put(&quot;appointmentDetail_StartTime_Month&quot;, appointmentDetail.StartTime.getMonth() + 1);
				vars.put(&quot;appointmentDetail_StartTime_Day&quot;, appointmentDetail.StartTime.getDate());
				vars.put(&quot;appointmentDetail_StartTime_Hours&quot;, appointmentDetail.StartTime.getHours());
				vars.put(&quot;appointmentDetail_StartTime_Minutes&quot;, appointmentDetail.StartTime.getMinutes());
				vars.put(&quot;appointmentDetail_StartTime_Seconds&quot;, appointmentDetail.StartTime.getSeconds());
				
				vars.put(&quot;appointmentDetail_EndTime_Year&quot;, appointmentDetail.EndTime.getFullYear());
				vars.put(&quot;appointmentDetail_EndTime_Month&quot;, appointmentDetail.EndTime.getMonth() + 1);
				vars.put(&quot;appointmentDetail_EndTime_Day&quot;, appointmentDetail.EndTime.getDate());
				vars.put(&quot;appointmentDetail_EndTime_Hours&quot;, appointmentDetail.EndTime.getHours());
				vars.put(&quot;appointmentDetail_EndTime_Minutes&quot;, appointmentDetail.EndTime.getMinutes());
				vars.put(&quot;appointmentDetail_EndTime_Seconds&quot;, appointmentDetail.EndTime.getSeconds());
	
				vars.put(&quot;appointmentDetail_DeviceStartTime_Year&quot;, DeviceStartTime.getFullYear());
				vars.put(&quot;appointmentDetail_DeviceStartTime_Month&quot;, DeviceStartTime.getMonth() + 1);
				vars.put(&quot;appointmentDetail_DeviceStartTime_Day&quot;, DeviceStartTime.getDate());
				vars.put(&quot;appointmentDetail_DeviceStartTime_Hours&quot;, DeviceStartTime.getHours());
				vars.put(&quot;appointmentDetail_DeviceStartTime_Minutes&quot;, DeviceStartTime.getMinutes());
				vars.put(&quot;appointmentDetail_DeviceStartTime_Seconds&quot;, DeviceStartTime.getSeconds());
				
				vars.put(&quot;appointmentDetail_DeviceEndTime_Year&quot;, DeviceEndTime.getFullYear());
				vars.put(&quot;appointmentDetail_DeviceEndTime_Month&quot;, DeviceEndTime.getMonth() + 1);
				vars.put(&quot;appointmentDetail_DeviceEndTime_Day&quot;, DeviceEndTime.getDate());
				vars.put(&quot;appointmentDetail_DeviceEndTime_Hours&quot;, DeviceEndTime.getHours());
				vars.put(&quot;appointmentDetail_DeviceEndTime_Minutes&quot;, DeviceEndTime.getMinutes());
				vars.put(&quot;appointmentDetail_DeviceEndTime_Seconds&quot;, DeviceEndTime.getSeconds());
				
				if(valSwitchAction == 3 || valSwitchAction == 4 || valSwitchAction == 5)
				{	
					isExecuteGetAppointmentById = true;
				}
				else if((valSwitchAction == 1) &amp;&amp; appointmentDetail.Subject.contains(&quot;test auto&quot;))
				{
					isExecuteDeleteAppointment = true;
				}
				else if((valSwitchAction == 6 || valSwitchAction == 7 || valSwitchAction == 8) 
				&amp;&amp; !appointmentDetail.IsConfirmed 
				&amp;&amp; appointmentDetail.ResourceModel &amp;&amp; appointmentDetail.ResourceModel.IsEnableConfirm)
				{
					isExecuteSearchResourceByResourceId = true;
				}
			}
		}
	}
	
	vars.put(&quot;isExecuteGetAppointmentById&quot;, isExecuteGetAppointmentById);
	vars.put(&quot;isExecuteDeleteAppointment&quot;, isExecuteDeleteAppointment);
	vars.put(&quot;isExecuteSearchResourceByResourceId&quot;, isExecuteSearchResourceByResourceId);
	vars.put(&quot;isExecuteListAppointmentNextPage&quot;, isExecuteListAppointmentNextPage);
}

HandleResponse();


</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isExecuteListAppointmentNextPage" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${isExecuteListAppointmentNextPage}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ListAppointmentPagging" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;CurrentDate&quot;: {&#xd;
    &quot;Year&quot;: ${utcYearNow},&#xd;
    &quot;Month&quot;: ${utcMonthNow},&#xd;
    &quot;Day&quot;: ${utcDateNow},&#xd;
    &quot;Hour&quot;: ${utcHourNow},&#xd;
    &quot;Minute&quot;: ${utcMinutesNow}&#xd;
  },&#xd;
  &quot;CurrentPage&quot;: ${ListAppointmentNextPage_CurrentPage},&#xd;
  &quot;UserID&quot;: &quot;${UserIDSearchList}&quot;,&#xd;
  &quot;LoginEmail&quot;: &quot;${UserNameSearchList}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/listappointmentpagging</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Time Delay" enabled="true">
                <stringProp name="ConstantTimer.delay">400</stringProp>
                <stringProp name="RandomTimer.range">400</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PrepareParamListAppointmentPagging" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}


function PrepareUserAccount()
{
	var loginEmailArray = vars.get(&quot;LoginEmailArray&quot;).split(&apos;,&apos;);
	var loginUserIDArray = vars.get(&quot;LoginUserIDArray&quot;).split(&apos;,&apos;);
	var index = getRandomInt(loginEmailArray.length);
	vars.put(&quot;UserNameSearchList&quot;, loginEmailArray[index]);
	vars.put(&quot;UserIDSearchList&quot;, loginUserIDArray[index]);
}

PrepareUserAccount();</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="HandleListAppointmentPagging" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}

function convertUTCDateToLocalDate(date) {
    var newDate = new Date(date.getTime() - date.getTimezoneOffset()*60*1000);
    return newDate;    
}

function convertLocalDateToUTCDate(date) {
    var newDate = new Date(date.getTime() + date.getTimezoneOffset()*60*1000);
    return newDate;    
}

function HandleResponse()
{
	var isExecuteGetAppointmentById = false;
	var isExecuteDeleteAppointment = false;
	var isExecuteSearchResourceByResourceId = false;
	
	if(prev.getResponseDataAsString())
	{
		var response = JSON.parse(prev.getResponseDataAsString());
		var countAppointment = parseInt(response[1]);
		var listAppointment = response[2];
		if(countAppointment &gt; 0)
		{
			var indexAppointment = getRandomInt(countAppointment);
			var appointmentDetail = listAppointment[indexAppointment];
			
			if(appointmentDetail){
				var valSwitchAction = getRandomInt(10);

				appointmentDetail.StartTime = convertLocalDateToUTCDate(new Date(appointmentDetail.StartTime));
				appointmentDetail.EndTime = convertLocalDateToUTCDate(new Date(appointmentDetail.EndTime));
				
				var DeviceStartTime = convertUTCDateToLocalDate(appointmentDetail.StartTime);
				var DeviceEndTime = convertUTCDateToLocalDate(appointmentDetail.EndTime);
				
				vars.put(&quot;appointmentDetail_Dummy&quot;, appointmentDetail.IsDummy);
				vars.put(&quot;appointmentDetail_Subject&quot;, appointmentDetail.Subject);
				vars.put(&quot;appointmentDetail_Organizer&quot;, appointmentDetail.Organizer);
				vars.put(&quot;appointmentDetail_OrganizerId&quot;, appointmentDetail.OrganizerId);
				vars.put(&quot;appointmentDetail_EventID&quot;, appointmentDetail.EventID);
				vars.put(&quot;appointmentDetail_UserID&quot;, appointmentDetail.UserID);
				vars.put(&quot;appointmentDetail_OrganizerEmail&quot;, appointmentDetail.OrganizerEmail);
				vars.put(&quot;appointmentDetail_UID&quot;, appointmentDetail.Uid);
				vars.put(&quot;appointmentDetail_RecurrenceTypeOfRepeat&quot;, appointmentDetail.RecurrenceTypeOfRepeat);
				vars.put(&quot;appointmentDetail_ResourceId&quot;, appointmentDetail.ResourceModel.Id);
				vars.put(&quot;appointmentDetail_IsAllDayEvent&quot;, appointmentDetail.IsAllDayEvent);		
				vars.put(&quot;appointmentDetail_Booked&quot;, appointmentDetail.Booked);
				vars.put(&quot;appointmentDetail_ResourceEmail&quot;, appointmentDetail.ResourceModel.Email);
				
				vars.put(&quot;appointmentDetail_StartTime_Year&quot;, appointmentDetail.StartTime.getFullYear());
				vars.put(&quot;appointmentDetail_StartTime_Month&quot;, appointmentDetail.StartTime.getMonth() + 1);
				vars.put(&quot;appointmentDetail_StartTime_Day&quot;, appointmentDetail.StartTime.getDate());
				vars.put(&quot;appointmentDetail_StartTime_Hours&quot;, appointmentDetail.StartTime.getHours());
				vars.put(&quot;appointmentDetail_StartTime_Minutes&quot;, appointmentDetail.StartTime.getMinutes());
				vars.put(&quot;appointmentDetail_StartTime_Seconds&quot;, appointmentDetail.StartTime.getSeconds());
				
				vars.put(&quot;appointmentDetail_EndTime_Year&quot;, appointmentDetail.EndTime.getFullYear());
				vars.put(&quot;appointmentDetail_EndTime_Month&quot;, appointmentDetail.EndTime.getMonth() + 1);
				vars.put(&quot;appointmentDetail_EndTime_Day&quot;, appointmentDetail.EndTime.getDate());
				vars.put(&quot;appointmentDetail_EndTime_Hours&quot;, appointmentDetail.EndTime.getHours());
				vars.put(&quot;appointmentDetail_EndTime_Minutes&quot;, appointmentDetail.EndTime.getMinutes());
				vars.put(&quot;appointmentDetail_EndTime_Seconds&quot;, appointmentDetail.EndTime.getSeconds());
	
				vars.put(&quot;appointmentDetail_DeviceStartTime_Year&quot;, DeviceStartTime.getFullYear());
				vars.put(&quot;appointmentDetail_DeviceStartTime_Month&quot;, DeviceStartTime.getMonth() + 1);
				vars.put(&quot;appointmentDetail_DeviceStartTime_Day&quot;, DeviceStartTime.getDate());
				vars.put(&quot;appointmentDetail_DeviceStartTime_Hours&quot;, DeviceStartTime.getHours());
				vars.put(&quot;appointmentDetail_DeviceStartTime_Minutes&quot;, DeviceStartTime.getMinutes());
				vars.put(&quot;appointmentDetail_DeviceStartTime_Seconds&quot;, DeviceStartTime.getSeconds());
				
				vars.put(&quot;appointmentDetail_DeviceEndTime_Year&quot;, DeviceEndTime.getFullYear());
				vars.put(&quot;appointmentDetail_DeviceEndTime_Month&quot;, DeviceEndTime.getMonth() + 1);
				vars.put(&quot;appointmentDetail_DeviceEndTime_Day&quot;, DeviceEndTime.getDate());
				vars.put(&quot;appointmentDetail_DeviceEndTime_Hours&quot;, DeviceEndTime.getHours());
				vars.put(&quot;appointmentDetail_DeviceEndTime_Minutes&quot;, DeviceEndTime.getMinutes());
				vars.put(&quot;appointmentDetail_DeviceEndTime_Seconds&quot;, DeviceEndTime.getSeconds());
				
				if(valSwitchAction == 3 || valSwitchAction == 4 || valSwitchAction == 5)
				{	
					isExecuteGetAppointmentById = true;
				}
				else if((valSwitchAction == 1) &amp;&amp; appointmentDetail.Subject.contains(&quot;test auto&quot;))
				{
					isExecuteDeleteAppointment = true;
				}
				else if((valSwitchAction == 6 || valSwitchAction == 7 || valSwitchAction == 8) 
				&amp;&amp; !appointmentDetail.IsConfirmed 
				&amp;&amp; appointmentDetail.ResourceModel &amp;&amp; appointmentDetail.ResourceModel.IsEnableConfirm)
				{
					isExecuteSearchResourceByResourceId = true;
				}
			}
		}
	}
	
	vars.put(&quot;isExecuteGetAppointmentById&quot;, isExecuteGetAppointmentById);
	vars.put(&quot;isExecuteDeleteAppointment&quot;, isExecuteDeleteAppointment);
	vars.put(&quot;isExecuteSearchResourceByResourceId&quot;, isExecuteSearchResourceByResourceId);
}

HandleResponse();


</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isExecuteGetAppointmentById" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="IfController.condition">${isExecuteGetAppointmentById}</stringProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetAppointmentByEventID" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;UserID&quot;: &quot;${appointmentDetail_UserID}&quot;,&#xd;
    &quot;EventID&quot;: &quot;${appointmentDetail_EventID}&quot;,&#xd;
    &quot;IsDummy&quot;: ${appointmentDetail_Dummy},&#xd;
    &quot;Subject&quot;: &quot;${appointmentDetail_Subject}&quot;,&#xd;
    &quot;StartTime&quot;: {&#xd;
        &quot;Year&quot;: ${appointmentDetail_StartTime_Year},&#xd;
        &quot;Month&quot;: ${appointmentDetail_StartTime_Month},&#xd;
        &quot;Day&quot;: ${appointmentDetail_StartTime_Day},&#xd;
        &quot;Hour&quot;: ${appointmentDetail_StartTime_Hours},&#xd;
        &quot;Minute&quot;: ${appointmentDetail_StartTime_Minutes},&#xd;
        &quot;Second&quot;: ${appointmentDetail_StartTime_Seconds}&#xd;
    },&#xd;
    &quot;EndTime&quot;: {&#xd;
        &quot;Year&quot;: ${appointmentDetail_EndTime_Year},&#xd;
        &quot;Month&quot;: ${appointmentDetail_EndTime_Month},&#xd;
        &quot;Day&quot;: ${appointmentDetail_EndTime_Day},&#xd;
        &quot;Hour&quot;: ${appointmentDetail_EndTime_Hours},&#xd;
        &quot;Minute&quot;: ${appointmentDetail_EndTime_Minutes},&#xd;
        &quot;Second&quot;: ${appointmentDetail_EndTime_Seconds}&#xd;
    },&#xd;
    &quot;OrganizerEmail&quot;: &quot;${appointmentDetail_OrganizerEmail}&quot;,&#xd;
    &quot;TokenDelegatedPermission&quot;: &quot;${TokenDelegatedPermission}&quot;,&#xd;
    &quot;Booked&quot;: null,&#xd;
    &quot;UId&quot;: null,&#xd;
    &quot;ResourceEmail&quot;: null,&#xd;
    &quot;OrganizerId&quot;: &quot;${appointmentDetail_OrganizerId}&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/GetAppointmentByEventID</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="HandleAppointmentDetail" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}


function convertLocalDateToUTCDate(date) {
    var newDate = new Date(date.getTime() + date.getTimezoneOffset()*60*1000);
    return newDate;    
}

function HandleResponse()
{
	var isExecuteGetMasterAppointment = false;
	var isExecuteUpdateSingleAppointment = false;

	if(prev.getResponseDataAsString())
	{
		var appointmentDetail = JSON.parse(prev.getResponseDataAsString());
		var valSwitchAction = getRandomInt(6);

		if(appointmentDetail &amp;&amp; new Date(appointmentDetail.StartTime) != &quot;Invalid Date&quot;)
		{
			appointmentDetail.StartTime = convertLocalDateToUTCDate(new Date(appointmentDetail.StartTime));
			appointmentDetail.EndTime = convertLocalDateToUTCDate(new Date(appointmentDetail.EndTime));
			
			vars.put(&quot;appointmentChild_Dummy&quot;, appointmentDetail.IsDummy);
			vars.put(&quot;appointmentChild_Subject&quot;, appointmentDetail.Subject);
			vars.put(&quot;appointmentChild_OrganizerId&quot;, appointmentDetail.OrganizerId);
			vars.put(&quot;appointmentChild_EventID&quot;, appointmentDetail.EventID);
			vars.put(&quot;appointmentChild_UserID&quot;, appointmentDetail.UserID);
			vars.put(&quot;appointmentChild_OrganizerEmail&quot;, appointmentDetail.OrganizerEmail);
			vars.put(&quot;appointmentChild_UID&quot;, appointmentDetail.UID);
			vars.put(&quot;appointmentChild_Booked&quot;, appointmentDetail.Booked);
			vars.put(&quot;appointmentChild_IsAllDayEvent&quot;, appointmentDetail.IsAllDayEvent);
			vars.put(&quot;appointmentChild_BusyStatusOfOrganizer&quot;, parseInt(appointmentDetail.BusyStatusOfOrganizer));

			if(appointmentDetail.ResourceModel)
			{
				vars.put(&quot;appointmentChild_ResourceEmail&quot;, appointmentDetail.ResourceModel.Email);
				vars.put(&quot;appointmentChild_ResourceTypeId&quot;, appointmentDetail.ResourceModel.ResourceTypesModel.Id);
				vars.put(&quot;appointmentChild_ResourceId&quot;, appointmentDetail.ResourceModel.Id);
			}

			vars.put(&quot;appointmentChild_StartTime_Year&quot;, appointmentDetail.StartTime.getFullYear());
			vars.put(&quot;appointmentChild_StartTime_Month&quot;, appointmentDetail.StartTime.getMonth() + 1);
			vars.put(&quot;appointmentChild_StartTime_Day&quot;, appointmentDetail.StartTime.getDate());
			vars.put(&quot;appointmentChild_StartTime_Hours&quot;, appointmentDetail.StartTime.getHours());
			vars.put(&quot;appointmentChild_StartTime_Minutes&quot;, appointmentDetail.StartTime.getMinutes());
			vars.put(&quot;appointmentChild_StartTime_Seconds&quot;, appointmentDetail.StartTime.getSeconds());
			
			vars.put(&quot;appointmentChild_EndTime_Year&quot;, appointmentDetail.EndTime.getFullYear());
			vars.put(&quot;appointmentChild_EndTime_Month&quot;, appointmentDetail.EndTime.getMonth() + 1);
			vars.put(&quot;appointmentChild_EndTime_Day&quot;, appointmentDetail.EndTime.getDate());
			vars.put(&quot;appointmentChild_EndTime_Hours&quot;, appointmentDetail.EndTime.getHours());
			vars.put(&quot;appointmentChild_EndTime_Minutes&quot;, appointmentDetail.EndTime.getMinutes());
			vars.put(&quot;appointmentChild_EndTime_Seconds&quot;, appointmentDetail.EndTime.getSeconds());
			
			if(parseInt(appointmentDetail.RecurrenceTypeOfRepeat) &gt; -1 &amp;&amp; valSwitchAction == 1)
			{
				isExecuteGetMasterAppointment = true;
			}
			else if(valSwitchAction == 2 || valSwitchAction == 3 || valSwitchAction == 4){
				isExecuteUpdateSingleAppointment = true;
			}
		}
		
	}

	vars.put(&quot;isExecuteGetMasterAppointment&quot;, isExecuteGetMasterAppointment);
	vars.put(&quot;isExecuteUpdateSingleAppointment&quot;, isExecuteUpdateSingleAppointment);
}

HandleResponse();


</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="GetAppointmentByEventID" enabled="true">
              <stringProp name="ConstantTimer.delay">1500</stringProp>
              <stringProp name="RandomTimer.range">2000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isExecuteGetMasterAppointment" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${isExecuteGetMasterAppointment}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetMasterAppointment" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;UserID&quot;: &quot;${appointmentChild_UserID}&quot;,&#xd;
    &quot;EventID&quot;: &quot;${appointmentChild_EventID}&quot;,&#xd;
    &quot;IsDummy&quot;: ${appointmentChild_Dummy},&#xd;
    &quot;Subject&quot;: &quot;${appointmentChild_Subject}&quot;,&#xd;
    &quot;StartTime&quot;: {&#xd;
        &quot;Year&quot;: ${appointmentChild_StartTime_Year},&#xd;
        &quot;Month&quot;: ${appointmentChild_StartTime_Month},&#xd;
        &quot;Day&quot;: ${appointmentChild_StartTime_Day},&#xd;
        &quot;Hour&quot;: ${appointmentChild_StartTime_Hours},&#xd;
        &quot;Minute&quot;: ${appointmentChild_StartTime_Minutes},&#xd;
        &quot;Second&quot;: ${appointmentChild_StartTime_Seconds}&#xd;
    },&#xd;
    &quot;EndTime&quot;: {&#xd;
        &quot;Year&quot;: ${appointmentChild_EndTime_Year},&#xd;
        &quot;Month&quot;: ${appointmentChild_EndTime_Month},&#xd;
        &quot;Day&quot;: ${appointmentChild_EndTime_Day},&#xd;
        &quot;Hour&quot;: ${appointmentChild_EndTime_Hours},&#xd;
        &quot;Minute&quot;: ${appointmentChild_EndTime_Minutes},&#xd;
        &quot;Second&quot;: ${appointmentChild_EndTime_Seconds}&#xd;
    },&#xd;
    &quot;OrganizerEmail&quot;: &quot;${appointmentChild_OrganizerEmail}&quot;,&#xd;
    &quot;TokenDelegatedPermission&quot;: &quot;${TokenDelegatedPermission}&quot;,&#xd;
    &quot;Booked&quot;: &quot;${appointmentChild_Booked}&quot;,&#xd;
    &quot;UId&quot;: &quot;${appointmentChild_UID}&quot;,&#xd;
    &quot;ResourceEmail&quot;: null,&#xd;
    &quot;OrganizerId&quot;: &quot;${appointmentChild_OrganizerId}&quot;&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/GetAppointmentByMasterID</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="GetMasterAppointmentTime" enabled="true">
                <stringProp name="ConstantTimer.delay">1000</stringProp>
                <stringProp name="RandomTimer.range">1000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isExecuteUpdateSingleAppointment" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${isExecuteUpdateSingleAppointment}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UpdateSingleAppointment" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;ListAttendees&quot;: [],&#xd;
    &quot;DeviceStartTime&quot;: {&#xd;
        &quot;Year&quot;: ${DeviceStartTime_Year_Update},&#xd;
        &quot;Month&quot;: ${DeviceStartTime_Month_Update},&#xd;
        &quot;Day&quot;: ${DeviceStartTime_Day_Update},&#xd;
        &quot;Hour&quot;: ${DeviceStartTime_Hours_Update},&#xd;
        &quot;Minute&quot;: ${DeviceStartTime_Minutes_Update},&#xd;
        &quot;Second&quot;: ${DeviceStartTime_Seconds_Update}&#xd;
    },&#xd;
    &quot;DeviceEndTime&quot;: {&#xd;
        &quot;Year&quot;: ${DeviceEndTime_Year_Update},&#xd;
        &quot;Month&quot;: ${DeviceEndTime_Month_Update},&#xd;
        &quot;Day&quot;: ${DeviceEndTime_Day_Update},&#xd;
        &quot;Hour&quot;: ${DeviceEndTime_Hours_Update},&#xd;
        &quot;Minute&quot;: ${DeviceEndTime_Minutes_Update},&#xd;
        &quot;Second&quot;: ${DeviceEndTime_Seconds_Update}&#xd;
    },&#xd;
    &quot;Booked&quot;: &quot;${appointmentChild_Booked}&quot;,&#xd;
    &quot;StartTimeRangeTimeMaster&quot;: null,&#xd;
    &quot;EndTimeRangeTimeMaster&quot;: null,&#xd;
    &quot;LoginEmail&quot;: &quot;${UserNameSearchList}&quot;,&#xd;
    &quot;Email&quot;: &quot;${appointmentChild_ResourceEmail}&quot;,&#xd;
    &quot;UID&quot;: &quot;${appointmentDetail_UID}&quot;,&#xd;
    &quot;StartTime&quot;: {&#xd;
        &quot;Year&quot;: ${StartTime_Year_Update},&#xd;
        &quot;Month&quot;: ${StartTime_Month_Update},&#xd;
        &quot;Day&quot;: ${StartTime_Day_Update},&#xd;
        &quot;Hour&quot;: ${StartTime_Hours_Update},&#xd;
        &quot;Minute&quot;: ${StartTime_Minutes_Update},&#xd;
        &quot;Second&quot;: ${StartTime_Seconds_Update}&#xd;
    },&#xd;
    &quot;EndTime&quot;: {&#xd;
        &quot;Year&quot;: ${EndTime_Year_Update},&#xd;
        &quot;Month&quot;: ${EndTime_Month_Update},&#xd;
        &quot;Day&quot;: ${EndTime_Day_Update},&#xd;
        &quot;Hour&quot;: ${EndTime_Hours_Update},&#xd;
        &quot;Minute&quot;: ${EndTime_Minutes_Update},&#xd;
        &quot;Second&quot;: ${EndTime_Seconds_Update}&#xd;
    },&#xd;
    &quot;IsAllDay&quot;: ${appointmentChild_IsAllDayEvent},&#xd;
    &quot;Timezone&quot;: &quot;${TimeZone}&quot;,&#xd;
    &quot;Subject&quot;: &quot;${SubjectUpdate}&quot;,&#xd;
    &quot;OrganizerEmail&quot;: &quot;${appointmentChild_OrganizerEmail}&quot;,&#xd;
    &quot;OldStartTime&quot;: {&#xd;
        &quot;Year&quot;: ${appointmentChild_StartTime_Year},&#xd;
        &quot;Month&quot;: ${appointmentChild_StartTime_Month},&#xd;
        &quot;Day&quot;: ${appointmentChild_StartTime_Day},&#xd;
        &quot;Hour&quot;: ${appointmentChild_StartTime_Hours},&#xd;
        &quot;Minute&quot;: ${appointmentChild_StartTime_Minutes},&#xd;
        &quot;Second&quot;: ${appointmentChild_StartTime_Seconds}&#xd;
    },&#xd;
    &quot;OldEndTime&quot;: {&#xd;
        &quot;Year&quot;: ${appointmentChild_EndTime_Year},&#xd;
        &quot;Month&quot;: ${appointmentChild_EndTime_Month},&#xd;
        &quot;Day&quot;: ${appointmentChild_EndTime_Day},&#xd;
        &quot;Hour&quot;: ${appointmentChild_EndTime_Hours},&#xd;
        &quot;Minute&quot;: ${appointmentChild_EndTime_Minutes},&#xd;
        &quot;Second&quot;: ${appointmentChild_EndTime_Seconds}&#xd;
    },&#xd;
    &quot;ResourceTypeId&quot;: ${appointmentChild_ResourceTypeId},&#xd;
    &quot;IsEndingNotConfirmedMeeting&quot;: false,&#xd;
    &quot;ReleaseInProgressMeeting&quot;: 0,&#xd;
    &quot;BusyStatusId&quot;: 2,&#xd;
    &quot;BusyStatusOfOrganizer&quot;: ${appointmentChild_BusyStatusOfOrganizer},&#xd;
    &quot;RecurrenceTypeOfRepeat&quot;: -1,&#xd;
    &quot;RecurrenceValueEvery&quot;: -1,&#xd;
    &quot;RecurrenceValueDay&quot;: -1,&#xd;
    &quot;RecurrenceValueMonth&quot;: -1,&#xd;
    &quot;RecurrenceValueIndexDayOfWeek&quot;: -1,&#xd;
    &quot;RecurrenceValueUntil&quot;: -1,&#xd;
    &quot;RecurrenceListDayOfWeek&quot;: [],&#xd;
    &quot;RecurrenceSpecificDate&quot;: null,&#xd;
    &quot;RecurrenceOccurrenceOrSeries&quot;: 0,&#xd;
    &quot;RecurrenceOccurrenceCount&quot;: -1,&#xd;
    &quot;EventID&quot;: &quot;${appointmentChild_EventID}&quot;,&#xd;
    &quot;ResourceId&quot;: ${appointmentChild_ResourceId},&#xd;
    &quot;UseForMailConfirm&quot;: false,&#xd;
    &quot;LanguageCode&quot;: &quot;en-US&quot;,&#xd;
    &quot;TokenDelegatedPermission&quot;: &quot;${TokenDelegatedPermission}&quot;&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/UpdateMeeting</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="UpdateSingleAppointment Delay" enabled="true">
                <stringProp name="ConstantTimer.delay">1000</stringProp>
                <stringProp name="RandomTimer.range">1000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreParamUpdateSingleAppointment" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}

function convertUTCDateToLocalDate(date) {
    var newDate = new Date(date.getTime() - date.getTimezoneOffset()*60*1000);
    return newDate;    
}

function convertLocalDateToUTCDate(date) {
    var newDate = new Date(date.getTime() + date.getTimezoneOffset()*60*1000);
    return newDate;    
}

function PreParamUpdateSingleAppointment()
{
	var subjectUpdateArray = vars.get(&quot;SubjectUpdateArray&quot;).split(&apos;,&apos;);
	var timeSpanArray = [];
	var timeSpan = parseInt(vars.get(&quot;TimeSpan&quot;));
	for(var i = timeSpan; i &lt; 59;)
	{
		timeSpanArray.push(i);
		i+= timeSpan;
	}

	var startTime = new Date(vars.get(&quot;appointmentChild_StartTime_Year&quot;),vars.get(&quot;appointmentChild_StartTime_Month&quot;)-1,vars.get(&quot;appointmentChild_StartTime_Day&quot;),vars.get(&quot;appointmentChild_StartTime_Hours&quot;),vars.get(&quot;appointmentChild_StartTime_Minutes&quot;),vars.get(&quot;appointmentChild_StartTime_Seconds&quot;));
	var endTime = new Date(vars.get(&quot;appointmentChild_EndTime_Year&quot;),vars.get(&quot;appointmentChild_EndTime_Month&quot;)-1,vars.get(&quot;appointmentChild_EndTime_Day&quot;),vars.get(&quot;appointmentChild_EndTime_Hours&quot;),vars.get(&quot;appointmentChild_EndTime_Minutes&quot;),vars.get(&quot;appointmentChild_EndTime_Seconds&quot;));

	vars.put(&quot;SubjectUpdate&quot;, subjectUpdateArray[getRandomInt(subjectUpdateArray.length)]);

	if(startTime == &quot;Invalid Date&quot;)
	{
		log.info(vars.get(&quot;appointmentChild_StartTime_Year&quot;));
		log.info(vars.get(&quot;appointmentChild_StartTime_Month&quot;));
		log.info(vars.get(&quot;appointmentChild_StartTime_Day&quot;));
		log.info(vars.get(&quot;appointmentChild_StartTime_Hours&quot;));
		log.info(vars.get(&quot;appointmentChild_StartTime_Minutes&quot;));
		log.info(vars.get(&quot;appointmentChild_StartTime_Seconds&quot;));
	}
	
	if(getRandomInt(5) == 1)
	{
		var minutesChange = timeSpanArray[getRandomInt(timeSpanArray.length)];
		startTime = new Date(startTime.getTime() + minutesChange*60* 1000);
		endTime = new Date(endTime.getTime() + minutesChange*60* 1000);
	}
	
	var deviceStartTime = convertUTCDateToLocalDate(startTime);
	var deviceEndTime = convertUTCDateToLocalDate(endTime);

	vars.put(&quot;StartTime_Year_Update&quot;, startTime.getFullYear());
	vars.put(&quot;StartTime_Month_Update&quot;, startTime.getMonth() + 1);
	vars.put(&quot;StartTime_Day_Update&quot;, startTime.getDate());
	vars.put(&quot;StartTime_Hours_Update&quot;, startTime.getHours());
	vars.put(&quot;StartTime_Minutes_Update&quot;, startTime.getMinutes());
	vars.put(&quot;StartTime_Seconds_Update&quot;, startTime.getSeconds());
	
	vars.put(&quot;EndTime_Year_Update&quot;, endTime.getFullYear());
	vars.put(&quot;EndTime_Month_Update&quot;, endTime.getMonth() + 1);
	vars.put(&quot;EndTime_Day_Update&quot;, endTime.getDate());
	vars.put(&quot;EndTime_Hours_Update&quot;, endTime.getHours());
	vars.put(&quot;EndTime_Minutes_Update&quot;, endTime.getMinutes());
	vars.put(&quot;EndTime_Seconds_Update&quot;, endTime.getSeconds());

	vars.put(&quot;DeviceStartTime_Year_Update&quot;, deviceStartTime.getFullYear());
	vars.put(&quot;DeviceStartTime_Month_Update&quot;, deviceStartTime.getMonth() + 1);
	vars.put(&quot;DeviceStartTime_Day_Update&quot;, deviceStartTime.getDate());
	vars.put(&quot;DeviceStartTime_Hours_Update&quot;, deviceStartTime.getHours());
	vars.put(&quot;DeviceStartTime_Minutes_Update&quot;, deviceStartTime.getMinutes());
	vars.put(&quot;DeviceStartTime_Seconds_Update&quot;, deviceStartTime.getSeconds());
	
	vars.put(&quot;DeviceEndTime_Year_Update&quot;, deviceEndTime.getFullYear());		
	vars.put(&quot;DeviceEndTime_Month_Update&quot;, deviceEndTime.getMonth() + 1);
	vars.put(&quot;DeviceEndTime_Day_Update&quot;, deviceEndTime.getDate());
	vars.put(&quot;DeviceEndTime_Hours_Update&quot;, deviceEndTime.getHours());
	vars.put(&quot;DeviceEndTime_Minutes_Update&quot;, deviceEndTime.getMinutes());
	vars.put(&quot;DeviceEndTime_Seconds_Update&quot;, deviceEndTime.getSeconds());
	
}

PreParamUpdateSingleAppointment();</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isExecuteDeleteAppointment" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="IfController.condition">${isExecuteDeleteAppointment}</stringProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeleteAppointment" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;LoginEmail&quot;: &quot;${UserNameSearchList}&quot;,&#xd;
    &quot;Uid&quot;: &quot;${appointmentDetail_UID}&quot;,&#xd;
    &quot;ResourceEmail&quot;: &quot;${appointmentDetail_ResourceEmail}&quot;,&#xd;
    &quot;StartTime&quot;: {&#xd;
        &quot;Year&quot;: ${appointmentDetail_StartTime_Year},&#xd;
        &quot;Month&quot;: ${appointmentDetail_StartTime_Month},&#xd;
        &quot;Day&quot;: ${appointmentDetail_StartTime_Day},&#xd;
        &quot;Hour&quot;: ${appointmentDetail_StartTime_Hours},&#xd;
        &quot;Minute&quot;: ${appointmentDetail_StartTime_Minutes},&#xd;
        &quot;Second&quot;: ${appointmentDetail_StartTime_Seconds}&#xd;
    },&#xd;
    &quot;EndTime&quot;: {&#xd;
        &quot;Year&quot;: ${appointmentDetail_EndTime_Year},&#xd;
        &quot;Month&quot;: ${appointmentDetail_EndTime_Month},&#xd;
        &quot;Day&quot;: ${appointmentDetail_EndTime_Day},&#xd;
        &quot;Hour&quot;: ${appointmentDetail_EndTime_Hours},&#xd;
        &quot;Minute&quot;: ${appointmentDetail_EndTime_Minutes},&#xd;
        &quot;Second&quot;: ${appointmentDetail_EndTime_Seconds}&#xd;
    },&#xd;
    &quot;OrganizerEmail&quot;: &quot;${appointmentDetail_OrganizerEmail}&quot;,&#xd;
    &quot;RecurrenceOccurrenceOrSeries&quot;: ${appointmentDetail_RecurrenceTypeOfRepeat},&#xd;
    &quot;EventID&quot;: &quot;${appointmentDetail_EventID}&quot;,&#xd;
    &quot;ResourceId&quot;: ${appointmentDetail_ResourceId},&#xd;
    &quot;UseForMailConfirm&quot;: false,&#xd;
    &quot;TokenDelegatedPermission&quot;: &quot;${TokenDelegatedPermission}&quot;,&#xd;
    &quot;IsAllDay&quot;: ${appointmentDetail_IsAllDayEvent},&#xd;
    &quot;DeviceStartTime&quot;: {&#xd;
        &quot;Year&quot;: ${appointmentDetail_DeviceStartTime_Year},&#xd;
        &quot;Month&quot;: ${appointmentDetail_DeviceStartTime_Month},&#xd;
        &quot;Day&quot;: ${appointmentDetail_DeviceStartTime_Day},&#xd;
        &quot;Hour&quot;: ${appointmentDetail_DeviceStartTime_Hours},&#xd;
        &quot;Minute&quot;: ${appointmentDetail_DeviceStartTime_Minutes},&#xd;
        &quot;Second&quot;: ${appointmentDetail_DeviceStartTime_Seconds}&#xd;
    },&#xd;
    &quot;DeviceEndTime&quot;: {&#xd;
        &quot;Year&quot;: ${appointmentDetail_DeviceEndTime_Year},&#xd;
        &quot;Month&quot;: ${appointmentDetail_DeviceEndTime_Month},&#xd;
        &quot;Day&quot;: ${appointmentDetail_DeviceEndTime_Day},&#xd;
        &quot;Hour&quot;: ${appointmentDetail_DeviceEndTime_Hours},&#xd;
        &quot;Minute&quot;: ${appointmentDetail_DeviceEndTime_Minutes},&#xd;
        &quot;Second&quot;: ${appointmentDetail_DeviceEndTime_Seconds}&#xd;
    },&#xd;
    &quot;Booked&quot;: &quot;${appointmentDetail_Booked}&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/DeleteMeeting</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="DeleteTime" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">2000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isExecuteSearchResourceByResourceId" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="IfController.condition">${isExecuteSearchResourceByResourceId}</stringProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchResourceByResourceId" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;LoginEmail&quot;: &quot;${UserNameSearchList}&quot;,&#xd;
	&quot;Id&quot;: &quot;${appointmentDetail_UserID}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/SearchResourceByResourceId</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">400</stringProp>
              <stringProp name="RandomTimer.range">400</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="HandleSearchResourceByResourceId" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}

function HandleResponese()
{
	if(prev.getResponseDataAsString())
	{
		var resource = JSON.parse(prev.getResponseDataAsString()); 
		var isExecuteConfirmMeetingByDate = false;
		var isExecuteConfirmMeeting = false;

		var valSwitch = getRandomInt(2);
		switch(valSwitch)
		{
			case 0:
				isExecuteConfirmMeetingByDate = true;
				break;
			case 1:
				isExecuteConfirmMeeting = true;
				break;
			default:
				break;
		}

		vars.put(&quot;ConfirmMeeting_ResourceId&quot;, resource.Id);
	}

	vars.put(&quot;isExecuteConfirmMeetingByDate&quot;, isExecuteConfirmMeetingByDate);
	vars.put(&quot;isExecuteConfirmMeeting&quot;, isExecuteConfirmMeeting);
}

HandleResponese();</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isExecuteConfirmMeeting" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${isExecuteConfirmMeeting}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ConfirmMeeting" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;LoginEmail&quot;: &quot;${UserNameSearchList}&quot;,&#xd;
	&quot;EventID&quot;: &quot;${appointmentDetail_EventID}&quot;,&#xd;
	&quot;ResourceId&quot;: ${ConfirmMeeting_ResourceId},&#xd;
	&quot;UseForMailConfirm&quot;: false &#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/ConfirmMeeting</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">400</stringProp>
                <stringProp name="RandomTimer.range">400</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isExecuteConfirmMeetingByDate" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${isExecuteConfirmMeetingByDate}</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ConfirmMeetingByDate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;LoginEmail&quot;: &quot;${UserNameSearchList}&quot;,&#xd;
	&quot;OrganizerId&quot;: &quot;${appointmentDetail_Organizer}&quot;,&#xd;
	&quot;ResourceId&quot;: &quot;${appointmentDetail_UserID}&quot;,&#xd;
	&quot;StartTime&quot;: {&#xd;
        &quot;Year&quot;: ${ConfirmMeetingByDate_UTCYearNow},&#xd;
        &quot;Month&quot;: ${ConfirmMeetingByDate_UTCMonthNow},&#xd;
        &quot;Day&quot;: ${ConfirmMeetingByDate_UTCDateNow},&#xd;
        &quot;Hour&quot;: ${ConfirmMeetingByDate_UTCHourNow},&#xd;
        &quot;Minute&quot;: ${ConfirmMeetingByDate_UTCMinutesNow},&#xd;
        &quot;Second&quot;: ${ConfirmMeetingByDate_UTCSecondsNow}&#xd;
    },&#xd;
    &quot;EndTime&quot;: {&#xd;
        &quot;Year&quot;: ${utcYearTomorrow},&#xd;
        &quot;Month&quot;: ${utcMonthTomorrow},&#xd;
        &quot;Day&quot;: ${utcDateTomorrow},&#xd;
        &quot;Hour&quot;: ${utcHourTomorrow},&#xd;
        &quot;Minute&quot;: ${utcMinutesTomorrow},&#xd;
        &quot;Second&quot;: ${utcSecondsTomorrow}&#xd;
    },&#xd;
	&quot;DoConfirm&quot;: true&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/ConfirmMeetingByDate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PrepareParamConfirmMeetingByDate" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">var dateNowUTCObject = new Date();

vars.put(&apos;ConfirmMeetingByDate_UTCDateNow&apos;, dateNowUTCObject.getUTCDate());
vars.put(&apos;ConfirmMeetingByDate_UTCMonthNow&apos;, dateNowUTCObject.getUTCMonth() + 1);
vars.put(&apos;ConfirmMeetingByDate_UTCYearNow&apos;, dateNowUTCObject.getUTCFullYear());
vars.put(&apos;ConfirmMeetingByDate_UTCHourNow&apos;, dateNowUTCObject.getUTCHours());
vars.put(&apos;ConfirmMeetingByDate_UTCMinutesNow&apos;, dateNowUTCObject.getUTCMinutes());
vars.put(&apos;ConfirmMeetingByDate_UTCSecondsNow&apos;, dateNowUTCObject.getUTCSeconds());
</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">400</stringProp>
                <stringProp name="RandomTimer.range">400</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="FindColleague, Get List Appointment, Get Detail - WS" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetFindColleagueOption" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/GetFindColleagueOption</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">400</stringProp>
            <stringProp name="RandomTimer.range">400</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetListAppointmentsByColleague" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;LoginEmail&quot;: &quot;${GetListAppointmentsByColleague_UserNameSearchList}&quot;,&#xd;
    &quot;UserID&quot;: &quot;${GetListAppointmentsByColleague_UserIDSearchList}&quot;,&#xd;
    &quot;Name&quot;: &quot;${FindColleague_Text}&quot;,&#xd;
    &quot;CurrentDate&quot;: {&#xd;
        &quot;Year&quot;: ${GetListAppointmentsByColleague_UTCYearNow},&#xd;
        &quot;Month&quot;: ${GetListAppointmentsByColleague_UTCMonthNow},&#xd;
        &quot;Day&quot;: ${GetListAppointmentsByColleague_UTCDateNow},&#xd;
        &quot;Hour&quot;: ${GetListAppointmentsByColleague_UTCHourNow},&#xd;
        &quot;Minute&quot;: ${GetListAppointmentsByColleague_UTCMinutesNow},&#xd;
        &quot;Second&quot;: ${GetListAppointmentsByColleague_UTCSecondsNow}&#xd;
    },&#xd;
    &quot;EndDate&quot;: {&#xd;
        &quot;Year&quot;: ${utcYearTomorrow},&#xd;
        &quot;Month&quot;: ${utcMonthTomorrow},&#xd;
        &quot;Day&quot;: ${utcDateTomorrow},&#xd;
        &quot;Hour&quot;: ${utcHourTomorrow},&#xd;
        &quot;Minute&quot;: ${utcMinutesTomorrow},&#xd;
        &quot;Second&quot;: ${utcSecondsTomorrow}&#xd;
    },&#xd;
    &quot;IsO365&quot;: ${Is365},&#xd;
    &quot;FilterOptionId&quot;: &quot;0&quot;,&#xd;
    &quot;ResourceTypeId&quot;: 0&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/GetListAppointmentsByColleague</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreParam GetListAppointmentsByColleague" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}


function PrepareUserAccount()
{
	var dateNowUTCObject = new Date();
	var loginEmailArray = vars.get(&quot;LoginEmailArray&quot;).split(&apos;,&apos;);
	var loginUserIDArray = vars.get(&quot;LoginUserIDArray&quot;).split(&apos;,&apos;);
	var index = getRandomInt(loginEmailArray.length);
	vars.put(&quot;GetListAppointmentsByColleague_UserNameSearchList&quot;, loginEmailArray[index]);
	vars.put(&quot;GetListAppointmentsByColleague_UserIDSearchList&quot;, loginUserIDArray[index]);


	vars.put(&apos;GetListAppointmentsByColleague_UTCDateNow&apos;, dateNowUTCObject.getUTCDate());
	vars.put(&apos;GetListAppointmentsByColleague_UTCMonthNow&apos;, dateNowUTCObject.getUTCMonth() + 1);
	vars.put(&apos;GetListAppointmentsByColleague_UTCYearNow&apos;, dateNowUTCObject.getUTCFullYear());
	vars.put(&apos;GetListAppointmentsByColleague_UTCHourNow&apos;, dateNowUTCObject.getUTCHours());
	vars.put(&apos;GetListAppointmentsByColleague_UTCMinutesNow&apos;, dateNowUTCObject.getUTCMinutes());
	vars.put(&apos;GetListAppointmentsByColleague_UTCSecondsNow&apos;, dateNowUTCObject.getUTCSeconds());
}

PrepareUserAccount();</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">500</stringProp>
            <stringProp name="RandomTimer.range">500</stringProp>
          </UniformRandomTimer>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Handle GetListAppointmentsByColleague" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}

function HandleResponse()
{
	var isExecuteSelectMeetingByColleague = false;
	if(prev.getResponseDataAsString())
	{
		var response = JSON.parse(prev.getResponseDataAsString());
		var countList = response.length;
		if(countList &gt; 0)
		{
			var organizer = response[getRandomInt(countList)];
			if(organizer)
			{
				isExecuteSelectMeetingByColleague = true;
				vars.put(&quot;SelectMeetingByColleague_UserNameSearchList&quot;, organizer.AccountName);
				vars.put(&quot;SelectMeetingByColleague_UserIDSearchList&quot;, organizer.UserID);
			}
		}
	}

	vars.put(&quot;isExecuteSelectMeetingByColleague&quot;,isExecuteSelectMeetingByColleague);
}

HandleResponse();</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="isExecuteSelectMeetingByColleague" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="IfController.condition">${isExecuteSelectMeetingByColleague}</stringProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SelectMeetingByColleague" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;LoginEmail&quot;: &quot;${SelectMeetingByColleague_UserNameSearchList}&quot;,&#xd;
    &quot;UserID&quot;: &quot;${SelectMeetingByColleague_UserIDSearchList}&quot;,&#xd;
    &quot;CurrentDate&quot;: {&#xd;
        &quot;Year&quot;: ${SelectMeetingByColleague_UTCYearNow},&#xd;
        &quot;Month&quot;: ${SelectMeetingByColleague_UTCMonthNow},&#xd;
        &quot;Day&quot;: ${SelectMeetingByColleague_UTCDateNow},&#xd;
        &quot;Hour&quot;: ${SelectMeetingByColleague_UTCHourNow},&#xd;
        &quot;Minute&quot;: ${SelectMeetingByColleague_UTCMinutesNow},&#xd;
        &quot;Second&quot;: ${SelectMeetingByColleague_UTCSecondsNow}&#xd;
    },&#xd;
    &quot;EndDate&quot;: {&#xd;
        &quot;Year&quot;: ${utcYearTomorrow},&#xd;
        &quot;Month&quot;: ${utcMonthTomorrow},&#xd;
        &quot;Day&quot;: ${utcDateTomorrow},&#xd;
        &quot;Hour&quot;: ${utcHourTomorrow},&#xd;
        &quot;Minute&quot;: ${utcMinutesTomorrow},&#xd;
        &quot;Second&quot;: ${utcSecondsTomorrow}&#xd;
    },&#xd;
    &quot;ResourceTypeId&quot;: 0&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">/${sitename}/Refactor/api/${apiversion}/${appname}/SelectMeetingByColleague</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreParam SelectMeetingByColleague" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">var dateNowUTCObject = new Date();

vars.put(&apos;SelectMeetingByColleague_UTCDateNow&apos;, dateNowUTCObject.getUTCDate());
vars.put(&apos;SelectMeetingByColleague_UTCMonthNow&apos;, dateNowUTCObject.getUTCMonth() + 1);
vars.put(&apos;SelectMeetingByColleague_UTCYearNow&apos;, dateNowUTCObject.getUTCFullYear());
vars.put(&apos;SelectMeetingByColleague_UTCHourNow&apos;, dateNowUTCObject.getUTCHours());
vars.put(&apos;SelectMeetingByColleague_UTCMinutesNow&apos;, dateNowUTCObject.getUTCMinutes());
vars.put(&apos;SelectMeetingByColleague_UTCSecondsNow&apos;, dateNowUTCObject.getUTCSeconds());</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">500</stringProp>
              <stringProp name="RandomTimer.range">500</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
